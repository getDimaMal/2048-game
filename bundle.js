(()=>{"use strict";var t={280:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([t.id,".grid{display:grid;grid-template-columns:repeat(4, 100px);grid-template-rows:repeat(4, 100px);gap:10px;position:relative}","",{version:3,sources:["webpack://./src/components/Grid/grid.scss"],names:[],mappings:"AAAA,MACE,YAAA,CACA,sCAAA,CACA,mCAAA,CACA,QAAA,CAEA,iBAAA",sourcesContent:[".grid {\n  display: grid;\n  grid-template-columns: repeat(4, 100px);\n  grid-template-rows: repeat(4, 100px);\n  gap: 10px;\n\n  position: relative;\n}"],sourceRoot:""}]);const s=a},316:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([t.id,".tile{width:100px;height:100px;background-color:gray;border-radius:5px;font-size:3rem;color:#fff;display:flex;align-items:center;justify-content:center}.tile.empty{background-color:#f8f8ff}.tile.slide{--time: 250;--from: 0;--to: 0;animation-name:slide;animation-duration:var(--time);animation-fill-mode:forwards}@keyframes slide{0%{transform:var(--from)}100%{transform:var(--to)}}","",{version:3,sources:["webpack://./src/components/Tile/tile.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAEA,MACE,WAAA,CACA,YAAA,CAEA,qBAAA,CACA,iBAAA,CAEA,cAAA,CACA,UAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,YACE,wBAAA,CAGF,YACE,WAAA,CACA,SAAA,CACA,OAAA,CCjBF,oBAAA,CACA,8BDkB+C,CCjB/C,4BAAA,CAPA,iBACE,GAAA,qBDuBqB,CCtBrB,KAAA,mBDsBkC,CAAA",sourcesContent:['@import "src/styles/mixins";\n\n.tile {\n  width: 100px;\n  height: 100px;\n\n  background-color: grey;\n  border-radius: 5px;\n\n  font-size: 3rem;\n  color: #FFF;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.empty {\n    background-color: ghostwhite;\n  }\n\n  &.slide {\n    --time: 250;\n    --from: 0;\n    --to: 0;\n\n    @include simpleSlide(var(--from), var(--to), var(--time))\n  }\n}',"@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}"],sourceRoot:""}]);const s=a},664:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([t.id,'*{margin:0;padding:0}html,body,#root{width:100vw;height:100vh;box-sizing:border-box;font-size:16px;font-family:"Roboto Light",sans-serif;display:flex;align-items:center;justify-content:center}',"",{version:3,sources:["webpack://./src/styles/main.scss"],names:[],mappings:"AAEA,EACE,QAAA,CACA,SAAA,CAGF,gBACE,WAAA,CACA,YAAA,CACA,qBAAA,CAEA,cAAA,CACA,qCAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA",sourcesContent:['@import "mixins";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, #root {\n  width: 100vw;\n  height: 100vh;\n  box-sizing: border-box;\n\n  font-size: 16px;\n  font-family: "Roboto Light", sans-serif;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n'],sourceRoot:""}]);const s=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},493:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),u=n(56),c=n.n(u),f=n(540),p=n.n(f),d=n(113),h=n.n(d),A=n(280),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=l().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),i()(A.A,v);const m=A.A&&A.A.locals?A.A.locals:void 0},385:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),u=n(56),c=n.n(u),f=n(540),p=n.n(f),d=n(113),h=n.n(d),A=n(316),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=l().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),i()(A.A,v);const m=A.A&&A.A.locals?A.A.locals:void 0},259:(t,e,n)=>{n.r(e),n.d(e,{default:()=>m});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),u=n(56),c=n.n(u),f=n(540),p=n.n(f),d=n(113),h=n.n(d),A=n(664),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=l().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),i()(A.A,v);const m=A.A&&A.A.locals?A.A.locals:void 0},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],u=r.base?l[0]+r.base:l[0],c=o[u]||0,f="".concat(u," ").concat(c);o[u]=c+1;var p=n(f),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(d);else{var h=i(d,r);r.byIndex=s,e.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var l=r(t,i),u=0;u<o.length;u++){var c=n(o[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},638:function(t,e){var n=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{l(r.next(t))}catch(t){o(t)}}function s(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameController=void 0;var i=function(){function t(t,e){var i=this;this.game=t,this.view=e,this.moveUp=function(){return n(i,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:return t=this.game.moveUp(),e=this.getNotEmptyTiles(),n=e.map((function(e,n){return e.slide("vertical",t[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveDown=function(){return n(i,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:return t=this.game.moveDown(),e=this.getNotEmptyTiles(),n=e.map((function(e,n){return e.slide("vertical",-1*t[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveLeft=function(){return n(i,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:return t=this.game.moveLeft(),e=this.getNotEmptyTiles(),n=e.map((function(e,n){return e.slide("horizontal",t[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveRight=function(){return n(i,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:return t=this.game.moveRight(),e=this.getNotEmptyTiles(),n=e.map((function(e,n){return e.slide("horizontal",-1*t[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.setKeydownListener(),this.view.renderTiles(this.game.getField())}return t.prototype.setKeydownListener=function(){var t=this,e={ArrowUp:this.moveUp,ArrowDown:this.moveDown,ArrowLeft:this.moveLeft,ArrowRight:this.moveRight};document.addEventListener("keydown",(function(i){return n(t,[i],void 0,(function(t){var n=t.key;return r(this,(function(t){switch(t.label){case 0:return n in e?[4,e[n]()]:[3,2];case 1:t.sent(),this.game.addRandomTile(),this.view.renderTiles(this.game.getField()),t.label=2;case 2:return[2]}}))}))}))},t.prototype.getNotEmptyTiles=function(){return this.view.getTilesList().filter((function(t){return t.getValue()}))},t.prototype.render=function(){return this.view.render()},t}();e.GameController=i},642:function(t,e,n){var r=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameModel=void 0;var a=o(n(266)),s=function(){function t(){var t=this;this.size=4,this.field=[],this.startGame=function(){t.setField(),t.addRandomTile(),t.addRandomTile()},this.moveUp=function(){var e=[],n=[];t.transposeMatrix(t.getMatrix()).forEach((function(t){var r=a.default.compressArray(t),i=r.shift,o=r.stack;e.push(i),n.push(o)}));var r=t.matrixToArray(t.transposeMatrix(e)),i=t.matrixToArray(t.transposeMatrix(n));return t.updateField(i),r.filter((function(t){return null!==t}))},this.moveDown=function(){var e=[],n=[];t.transposeMatrix(t.getMatrix()).forEach((function(t){var r=a.default.compressArray(t.reverse()),i=r.shift,o=r.stack;e.push(i.reverse()),n.push(o.reverse())}));var r=t.matrixToArray(t.transposeMatrix(e)),i=t.matrixToArray(t.transposeMatrix(n));return t.updateField(i),r.filter((function(t){return null!==t}))},this.moveLeft=function(){var e=[],n=[];return t.getMatrix().forEach((function(t){var o=a.default.compressArray(t),s=o.shift,l=o.stack;e.push.apply(e,i([],r(s),!1)),n.push.apply(n,i([],r(l),!1))})),t.updateField(n),e.filter((function(t){return null!==t}))},this.moveRight=function(){var e=[],n=[];return t.getMatrix().forEach((function(t){var o=a.default.compressArray(t.reverse()),s=o.shift,l=o.stack;e.push.apply(e,i([],r(s.reverse()),!1)),n.push.apply(n,i([],r(l.reverse()),!1))})),t.updateField(n),e.filter((function(t){return null!==t}))},this.startGame()}return t.prototype.setField=function(){this.field=Array(Math.pow(this.size,2)).fill(0)},t.prototype.getField=function(){return this.field},t.prototype.updateField=function(t){this.field=i([],r(t),!1)},t.prototype.matrixToArray=function(t){return t.reduce((function(t,e){return i(i([],r(t),!1),r(e),!1)}),[])},t.prototype.getMatrix=function(){for(var t=[],e=0;e<this.field.length;e+=this.size)t.push(this.field.slice(e,e+this.size));return t},t.prototype.transposeMatrix=function(t){return t.map((function(e,n){return t.map((function(t){return t[n]}))}))},t.prototype.addRandomTile=function(){var t=[];if(this.field.forEach((function(e,n){return!e&&t.push(n)})),t.length){var e=t[Math.floor(Math.random()*t.length)];this.field[e]=Math.random()>.9?4:2}},t}();e.GameModel=s},424:function(t,e,n){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameView=void 0;var i=r(n(126)),o=r(n(885)),a=function(){function t(){this.tilesList=[],this.grid=(new i.default).render()}return t.prototype.setTilesList=function(t){var e=this;this.tilesList=[],t.forEach((function(t){return e.tilesList.push(new o.default({value:t}))}))},t.prototype.getTilesList=function(){return this.tilesList},t.prototype.renderTiles=function(t){var e=this;this.setTilesList(t),this.grid.innerHTML="",this.tilesList.forEach((function(t){return e.grid.append(t.render())}))},t.prototype.render=function(){return this.grid},t}();e.GameView=a},940:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid=void 0,n(493);var r=function(){function t(){this.grid=document.createElement("div"),this.grid.classList.add("grid")}return t.prototype.render=function(){return this.grid},t}();e.Grid=r},126:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=n(940);e.default=r.Grid},840:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{l(r.next(t))}catch(t){o(t)}}function s(t){try{l(r.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}l((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Tile=void 0,n(385);var o=function(){function t(t){this.props=t,this.tile=document.createElement("div"),this.setValue(),this.setClasses()}return t.prototype.setValue=function(){this.tile.innerText=String(this.props.value||"")},t.prototype.setClasses=function(){this.tile.classList.add("tile"),0===this.props.value&&this.tile.classList.add("empty")},t.prototype.getValue=function(){return this.props.value},t.prototype.slide=function(t,e){return r(this,void 0,void 0,(function(){var n,r,o=this;return i(this,(function(i){return n="horizontal"===t?"X":"Y",r=function(t){return"translate".concat(n,"(").concat(t,"px)")},[2,new Promise((function(t){o.tile.style.setProperty("--time","".concat(100,"ms")),o.tile.style.setProperty("--from",r(0)),o.tile.style.setProperty("--to",r(110*e)),o.tile.classList.add("slide"),setTimeout((function(){o.tile.removeAttribute("stile"),t(null)}),100)}))]}))}))},t.prototype.render=function(){return this.tile},t}();e.Tile=o},885:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=n(840);e.default=r.Tile},830:function(t,e){var n=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},r=this&&this.__spreadArray||function(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.compressArray=void 0,e.compressArray=function(t){for(var e=[],i=[],o=0;o<t.length;o++)if(t[o]){var a=e.pop();a===t[o]?e.push(a+t[o]):e.push.apply(e,r([],n(a?[a,t[o]]:[t[o]]),!1)),i.push(e.length-1-o)}else i.push(null);return{stack:r(r([],n(e),!1),n(Array(t.length-e.length).fill(0)),!1),shift:i}}},266:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var r={compressArray:n(830).compressArray};e.default=r}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nc=void 0,(()=>{n(259);var t=n(642),e=n(638),r=n(424);document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("root"),i=new e.GameController(new t.GameModel,new r.GameView);n.append(i.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,