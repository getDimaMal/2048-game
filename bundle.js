(()=>{"use strict";var e={280:(e,t,n)=>{n.d(t,{A:()=>f});var r=n(354),i=n.n(r),o=n(314),a=n.n(o),l=n(417),s=n.n(l),c=new URL(n(591),n.b),u=a()(i()),d=s()(c);u.push([e.id,`.grid{width:22rem;height:22rem;box-sizing:unset;display:flex;flex-wrap:wrap;align-items:flex-start;align-content:flex-start;background-image:url(${d});background-repeat:space;background-size:5.5rem}`,"",{version:3,sources:["webpack://./src/components/Grid/grid.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,MAIE,WAFO,CAGP,YAHO,CAIP,gBAAA,CAEA,YAAA,CACA,cAAA,CACA,sBAAA,CACA,wBAAA,CAEA,wDCPW,CDQX,uBAAA,CACA,sBAdO",sourcesContent:['@import "src/styles/variables";\n\n.grid {\n  $tile: calc($tile-size + $tile-margin * 2);\n  $size: calc(4 * $tile);\n\n  width: $size;\n  height: $size;\n  box-sizing: unset;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n\n  background-image: $empty-tile;\n  background-repeat: space;\n  background-size: $tile;\n}','$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #B95D5D;\n$background-color-tablet: #519651;\n$background-color-desktop: #6498A9;\n\n$empty-tile: url(src/asset/empty-tile.svg);\n\n$tile-margin: 0.25rem;\n$tile-size: 5rem;\n\n$tile-2: #EEE4DA;\n$tile-4: #EDE0C8;\n$tile-8: #F2B179;\n$tile-16: #F59563;\n$tile-32: #F67C5F;\n$tile-64: #F65E3B;\n$tile-128: #EDCF72;\n$tile-256: #EDCC61;\n$tile-512: #EDC850;\n$tile-1024: #EDC53F;\n$tile-2048: #EDC22E;\n\n$tile-color-dark: #776E65;\n$tile-color-light: #F9F6F2;\n\n$tile-styles: (\n  "tile-2": ($tile-2, $tile-color-dark, 2rem),\n  "tile-4": ($tile-4, $tile-color-dark, 2rem),\n  "tile-8": ($tile-8, $tile-color-light, 2rem),\n  "tile-16": ($tile-16, $tile-color-light, 2rem),\n  "tile-32": ($tile-32, $tile-color-light, 2rem),\n  "tile-64": ($tile-64, $tile-color-light, 2rem),\n  "tile-128": ($tile-128, $tile-color-light, 1.8rem),\n  "tile-256": ($tile-256, $tile-color-light, 1.8rem),\n  "tile-512": ($tile-512, $tile-color-light, 1.8rem),\n  "tile-1024": ($tile-1024, $tile-color-light, 1.6rem),\n  "tile-2048": ($tile-2048, $tile-color-light, 1.6rem)\n);'],sourceRoot:""}]);const f=u},316:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([e.id,".tile{width:5rem;height:5rem;margin:.25rem;border-radius:22%;display:flex;align-items:center;justify-content:center;flex:0 0 5rem;background-color:#edc22e;color:#f9f6f2;font-size:1.6rem}.tile.empty{background-color:inherit}.tile.tile-2{background-color:#eee4da;color:#776e65;font-size:2rem}.tile.tile-4{background-color:#ede0c8;color:#776e65;font-size:2rem}.tile.tile-8{background-color:#f2b179;color:#f9f6f2;font-size:2rem}.tile.tile-16{background-color:#f59563;color:#f9f6f2;font-size:2rem}.tile.tile-32{background-color:#f67c5f;color:#f9f6f2;font-size:2rem}.tile.tile-64{background-color:#f65e3b;color:#f9f6f2;font-size:2rem}.tile.tile-128{background-color:#edcf72;color:#f9f6f2;font-size:1.8rem}.tile.tile-256{background-color:#edcc61;color:#f9f6f2;font-size:1.8rem}.tile.tile-512{background-color:#edc850;color:#f9f6f2;font-size:1.8rem}.tile.tile-1024{background-color:#edc53f;color:#f9f6f2;font-size:1.6rem}.tile.tile-2048{background-color:#edc22e;color:#f9f6f2;font-size:1.6rem}.tile.slide{--time: 250;--from: 0;--to: 0;will-change:transform;transform:translateZ(0);animation:slide var(--time) ease forwards;-webkit-animation:slide var(--time) ease forwards;-moz-animation:slide var(--time) ease forwards;-o-animation:slide var(--time) ease forwards}@keyframes slide{0%{transform:var(--from)}100%{transform:var(--to)}}.tile.scale{--time: 250;will-change:transform;transform:translateZ(0);animation:scale var(--time) ease-out forwards;-webkit-animation:scale var(--time) ease-out forwards;-moz-animation:scale var(--time) ease-out forwards;-o-animation:scale var(--time) ease-out forwards}@keyframes scale{0%,100%{transform:scale(1)}50%{transform:scale(1.1)}}","",{version:3,sources:["webpack://./src/components/Tile/tile.scss","webpack://./src/styles/_variables.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAGA,MACE,UCOU,CDNV,WCMU,CDLV,aCIY,CDFZ,iBAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,aAAA,CAEA,wBCQU,CDPV,aCUiB,CDTjB,gBAAA,CAEA,YACE,wBAAA,CAIA,aACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,aACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,aACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,cACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,cACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,cACE,wBAAA,CACA,aAAA,CACA,cAAA,CAHF,eACE,wBAAA,CACA,aAAA,CACA,gBAAA,CAHF,eACE,wBAAA,CACA,aAAA,CACA,gBAAA,CAHF,eACE,wBAAA,CACA,aAAA,CACA,gBAAA,CAHF,gBACE,wBAAA,CACA,aAAA,CACA,gBAAA,CAHF,gBACE,wBAAA,CACA,aAAA,CACA,gBAAA,CAIJ,YACE,WAAA,CACA,SAAA,CACA,OAAA,CEnBF,qBAAA,CACA,uBAAA,CACA,yCAAA,CAEA,iDAAA,CACA,8CAAA,CACA,4CAAA,CAZA,iBACE,GAAA,qBF0BsB,CEzBtB,KAAA,mBFyBmC,CAAA,CAGrC,YACE,WAAA,CEVF,qBAAA,CACA,uBAAA,CACA,6CAAA,CAEA,qDAAA,CACA,kDAAA,CACA,gDAAA,CAXA,iBACE,QAAA,kBAAA,CACA,IAAA,oBAAA,CAAA",sourcesContent:['@import "src/styles/mixins";\n@import "src/styles/variables";\n\n.tile {\n  width: $tile-size;\n  height: $tile-size;\n  margin: $tile-margin;\n\n  border-radius: 22%;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 0 0 $tile-size;\n\n  background-color: $tile-2048;\n  color: $tile-color-light;\n  font-size: 1.6rem;\n\n  &.empty {\n    background-color: inherit;\n  }\n\n  @each $tile-name, $values in $tile-styles {\n    &.#{$tile-name} {\n      background-color: nth($values, 1);\n      color: nth($values, 2);\n      font-size: nth($values, 3);\n    }\n  }\n\n  &.slide {\n    --time: 250;\n    --from: 0;\n    --to: 0;\n\n    @include simple-slide(var(--from), var(--to), var(--time))\n  }\n\n  &.scale {\n    --time: 250;\n    @include simple-scale(1.1, var(--time))\n  }\n}','$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #B95D5D;\n$background-color-tablet: #519651;\n$background-color-desktop: #6498A9;\n\n$empty-tile: url(src/asset/empty-tile.svg);\n\n$tile-margin: 0.25rem;\n$tile-size: 5rem;\n\n$tile-2: #EEE4DA;\n$tile-4: #EDE0C8;\n$tile-8: #F2B179;\n$tile-16: #F59563;\n$tile-32: #F67C5F;\n$tile-64: #F65E3B;\n$tile-128: #EDCF72;\n$tile-256: #EDCC61;\n$tile-512: #EDC850;\n$tile-1024: #EDC53F;\n$tile-2048: #EDC22E;\n\n$tile-color-dark: #776E65;\n$tile-color-light: #F9F6F2;\n\n$tile-styles: (\n  "tile-2": ($tile-2, $tile-color-dark, 2rem),\n  "tile-4": ($tile-4, $tile-color-dark, 2rem),\n  "tile-8": ($tile-8, $tile-color-light, 2rem),\n  "tile-16": ($tile-16, $tile-color-light, 2rem),\n  "tile-32": ($tile-32, $tile-color-light, 2rem),\n  "tile-64": ($tile-64, $tile-color-light, 2rem),\n  "tile-128": ($tile-128, $tile-color-light, 1.8rem),\n  "tile-256": ($tile-256, $tile-color-light, 1.8rem),\n  "tile-512": ($tile-512, $tile-color-light, 1.8rem),\n  "tile-1024": ($tile-1024, $tile-color-light, 1.6rem),\n  "tile-2048": ($tile-2048, $tile-color-light, 1.6rem)\n);','@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simple-slide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n\n  }\n\n  will-change: transform;\n  transform: translateZ(0);\n  animation: slide $duration ease forwards;\n  /* Vendor Prefixes for older browsers */\n  -webkit-animation: slide $duration ease forwards;\n  -moz-animation: slide $duration ease forwards;\n  -o-animation: slide $duration ease forwards;\n}\n\n@mixin simple-scale($scale, $duration) {\n  @keyframes scale {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale($scale); }\n  }\n\n  will-change: transform;\n  transform: translateZ(0);\n  animation: scale $duration ease-out forwards;\n  /* Vendor Prefixes for older browsers */\n  -webkit-animation: scale $duration ease-out forwards;\n  -moz-animation: scale $duration ease-out forwards;\n  -o-animation: scale $duration ease-out forwards;\n}\n'],sourceRoot:""}]);const l=a},664:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([e.id,'*{margin:0;padding:0}html,body,#root{width:100%;height:100%;overflow-x:hidden;overflow-y:hidden;font-family:"Roboto Light",sans-serif;user-select:none;position:fixed}@media(max-width: 480px){html,body{font-size:14px}}@media(min-width: 481px)and (max-width: 768px){html,body{font-size:16px}}@media(min-width: 769px){html,body{font-size:18px}}#root{display:flex;flex-direction:column;align-items:center;justify-content:center}@media(max-width: 480px){#root{background-color:#b95d5d;overflow-y:scroll;-webkit-overflow-scrolling:touch}}@media(min-width: 481px)and (max-width: 768px){#root{background-color:#519651}}@media(min-width: 769px){#root{background-color:#6498a9}}',"",{version:3,sources:["webpack://./src/styles/main.scss","webpack://./src/styles/_mixins.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAIA,EACE,QAAA,CACA,SAAA,CAGF,gBACE,UAAA,CACA,WAAA,CAEA,iBAAA,CACA,iBAAA,CAEA,qCAAA,CAEA,gBAAA,CAEA,cAAA,CCjBA,yBDoBF,UAEI,cAAA,CAAA,CCtBF,+CDoBF,UAKI,cAAA,CAAA,CCzBF,yBDoBF,UAQI,cAAA,CAAA,CAIJ,MACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CCpCA,yBDgCF,MAOI,wBEtCsB,CFwCtB,iBAAA,CACA,gCAAA,CAAA,CC1CF,+CDgCF,MAaI,wBE3CsB,CAAA,CDFxB,yBDgCF,MAgBI,wBE7CuB,CAAA",sourcesContent:['@import "mixins";\n@import "variables";\n@import "functions";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, #root {\n  width: 100%;\n  height: 100%;\n\n  overflow-x: hidden;\n  overflow-y: hidden;\n\n  font-family: "Roboto Light", sans-serif;\n\n  user-select: none;\n\n  position: fixed;\n}\n\nhtml, body {\n  @include respond-to("mobile") {\n    font-size: 14px;\n  }\n  @include respond-to("tablet") {\n    font-size: 16px;\n  }\n  @include respond-to("desktop") {\n    font-size: 18px;\n  }\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @include respond-to("mobile") {\n    background-color: $background-color-mobile;\n\n    overflow-y: scroll; // Allow vertical scroll on mobile devices\n    -webkit-overflow-scrolling: touch; // Smooth scrolling on touch devices\n  }\n  @include respond-to("tablet") {\n    background-color: $background-color-tablet;\n  }\n  @include respond-to("desktop") {\n    background-color: $background-color-desktop;\n  }\n}\n\n','@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simple-slide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n\n  }\n\n  will-change: transform;\n  transform: translateZ(0);\n  animation: slide $duration ease forwards;\n  /* Vendor Prefixes for older browsers */\n  -webkit-animation: slide $duration ease forwards;\n  -moz-animation: slide $duration ease forwards;\n  -o-animation: slide $duration ease forwards;\n}\n\n@mixin simple-scale($scale, $duration) {\n  @keyframes scale {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale($scale); }\n  }\n\n  will-change: transform;\n  transform: translateZ(0);\n  animation: scale $duration ease-out forwards;\n  /* Vendor Prefixes for older browsers */\n  -webkit-animation: scale $duration ease-out forwards;\n  -moz-animation: scale $duration ease-out forwards;\n  -o-animation: scale $duration ease-out forwards;\n}\n','$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #B95D5D;\n$background-color-tablet: #519651;\n$background-color-desktop: #6498A9;\n\n$empty-tile: url(src/asset/empty-tile.svg);\n\n$tile-margin: 0.25rem;\n$tile-size: 5rem;\n\n$tile-2: #EEE4DA;\n$tile-4: #EDE0C8;\n$tile-8: #F2B179;\n$tile-16: #F59563;\n$tile-32: #F67C5F;\n$tile-64: #F65E3B;\n$tile-128: #EDCF72;\n$tile-256: #EDCC61;\n$tile-512: #EDC850;\n$tile-1024: #EDC53F;\n$tile-2048: #EDC22E;\n\n$tile-color-dark: #776E65;\n$tile-color-light: #F9F6F2;\n\n$tile-styles: (\n  "tile-2": ($tile-2, $tile-color-dark, 2rem),\n  "tile-4": ($tile-4, $tile-color-dark, 2rem),\n  "tile-8": ($tile-8, $tile-color-light, 2rem),\n  "tile-16": ($tile-16, $tile-color-light, 2rem),\n  "tile-32": ($tile-32, $tile-color-light, 2rem),\n  "tile-64": ($tile-64, $tile-color-light, 2rem),\n  "tile-128": ($tile-128, $tile-color-light, 1.8rem),\n  "tile-256": ($tile-256, $tile-color-light, 1.8rem),\n  "tile-512": ($tile-512, $tile-color-light, 1.8rem),\n  "tile-1024": ($tile-1024, $tile-color-light, 1.6rem),\n  "tile-2048": ($tile-2048, $tile-color-light, 1.6rem)\n);'],sourceRoot:""}]);const l=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},493:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),l=n(659),s=n.n(l),c=n(56),u=n.n(c),d=n(540),f=n.n(d),A=n(113),p=n.n(A),m=n(280),h={};h.styleTagTransform=p(),h.setAttributes=u(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=f(),i()(m.A,h);const v=m.A&&m.A.locals?m.A.locals:void 0},385:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),l=n(659),s=n.n(l),c=n(56),u=n.n(c),d=n(540),f=n.n(d),A=n(113),p=n.n(A),m=n(316),h={};h.styleTagTransform=p(),h.setAttributes=u(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=f(),i()(m.A,h);const v=m.A&&m.A.locals?m.A.locals:void 0},259:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),l=n(659),s=n.n(l),c=n(56),u=n.n(c),d=n(540),f=n.n(d),A=n(113),p=n.n(A),m=n(664),h={};h.styleTagTransform=p(),h.setAttributes=u(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=f(),i()(m.A,h);const v=m.A&&m.A.locals?m.A.locals:void 0},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],l=0;l<e.length;l++){var s=e[l],c=r.base?s[0]+r.base:s[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var f=n(d),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(A);else{var p=i(A,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var l=n(o[a]);t[l].references--}for(var s=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=s}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},638:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&l[0]?r.return:l[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,l[1])).done)return i;switch(r=0,i&&(l=[2&l[0],i.value]),l[0]){case 0:case 1:i=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!i||l[1]>i[0]&&l[1]<i[3])){a.label=l[1];break}if(6===l[0]&&a.label<i[1]){a.label=i[1],i=l;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(l);break}i[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=i=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.game=e,this.view=t,this.actions={ArrowUp:{action:this.game.moveUp,direction:"vertical",multiplier:1},ArrowDown:{action:this.game.moveDown,direction:"vertical",multiplier:-1},ArrowLeft:{action:this.game.moveLeft,direction:"horizontal",multiplier:1},ArrowRight:{action:this.game.moveRight,direction:"horizontal",multiplier:-1}},this.setKeydownListener(),this.view.renderTiles(this.game.getField())}return e.prototype.getNotEmptyTiles=function(){return this.view.getTilesList().filter((function(e){return e.getValue()}))},e.prototype.setKeydownListener=function(){var e=this;document.addEventListener("keydown",(function(t){return n(e,[t],void 0,(function(e){var t,n,i,o,a,l,s,c=e.key;return r(this,(function(e){switch(e.label){case 0:return c in this.actions?(t=this.actions[c],n=t.action,i=t.direction,o=t.multiplier,a=n(),l=this.getNotEmptyTiles(),s=l.map((function(e,t){return e.slide(i,(a[t]||0)*o)})),[4,Promise.all(s)]):[2];case 1:return e.sent(),a.filter((function(e){return!!e})).length&&this.game.addRandomTile(),this.view.renderTiles(this.game.getField()),[2]}}))}))}))},e.prototype.render=function(){return this.view.render()},e}();t.default=i},691:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){var e=this;this.startX=0,this.startY=0,this.actions={ArrowUp:function(){return document.dispatchEvent(new KeyboardEvent("keydown",{key:"ArrowUp"}))},ArrowDown:function(){return document.dispatchEvent(new KeyboardEvent("keydown",{key:"ArrowDown"}))},ArrowLeft:function(){return document.dispatchEvent(new KeyboardEvent("keydown",{key:"ArrowLeft"}))},ArrowRight:function(){return document.dispatchEvent(new KeyboardEvent("keydown",{key:"ArrowRight"}))}},this.handleTouchStart=function(t){var n=t.touches[0];e.startX=n.clientX,e.startY=n.clientY},this.handleTouchEnd=function(t){var n=t.changedTouches[0],r=n.clientX-e.startX,i=n.clientY-e.startY;Math.abs(r)<Math.abs(i)?i<0?e.actions.ArrowUp():e.actions.ArrowDown():r<0?e.actions.ArrowLeft():e.actions.ArrowRight()},this.addEventListener()}return e.prototype.addEventListener=function(){document.addEventListener("touchstart",this.handleTouchStart,!1),document.addEventListener("touchend",this.handleTouchEnd,!1)},e}();t.default=n},642:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=o(n(266)),l=function(){function e(){var e=this;this.size=4,this.field=[],this.startGame=function(){e.setField(),e.addRandomTile(),e.addRandomTile()},this.moveUp=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e),i=r.shift,o=r.stack;t.push(i),n.push(o)}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),i=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(i),r.filter((function(e){return null!==e}))},this.moveDown=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e.reverse()),i=r.shift,o=r.stack;t.push(i.reverse()),n.push(o.reverse())}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),i=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(i),r.filter((function(e){return null!==e}))},this.moveLeft=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var o=a.default.compressArray(e),l=o.shift,s=o.stack;t.push.apply(t,i([],r(s),!1)),n.push.apply(n,i([],r(l),!1))})),e.updateField(t),n.filter((function(e){return null!==e}))},this.moveRight=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var o=a.default.compressArray(e.reverse()),l=o.shift,s=o.stack;t.push.apply(t,i([],r(s.reverse()),!1)),n.push.apply(n,i([],r(l.reverse()),!1))})),e.updateField(t),n.filter((function(e){return null!==e}))},this.startGame()}return e.prototype.setField=function(){this.field=Array(Math.pow(this.size,2)).fill(0)},e.prototype.updateField=function(e){this.field=i([],r(e),!1)},e.prototype.getField=function(){return i([],r(this.field),!1)},e.prototype.addRandomTile=function(){var e=[];if(this.field.forEach((function(t,n){return!t&&e.push(n)})),e.length){var t=e[Math.floor(Math.random()*e.length)];this.field[t]=Math.random()>.9?4:2}},e}();t.default=l},424:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(785),i=function(){function e(){this.tilesList=[],this.grid=(new r.Grid).render()}return e.prototype.setTilesList=function(e){var t=this;this.tilesList=[],e.forEach((function(e){return t.tilesList.push(new r.Tile({value:e}))}))},e.prototype.getTilesList=function(){return this.tilesList},e.prototype.renderTiles=function(e){var t=this;this.setTilesList(e),this.grid.innerHTML="",this.tilesList.forEach((function(e){return t.grid.append(e.render())}))},e.prototype.render=function(){return this.grid},e}();t.default=i},940:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),n(493);var r=function(){function e(){this.grid=document.createElement("div"),this.grid.classList.add("grid")}return e.prototype.render=function(){return this.grid},e}();t.default=r},126:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0;var i=r(n(940));t.Grid=i.default},840:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&l[0]?r.return:l[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,l[1])).done)return i;switch(r=0,i&&(l=[2&l[0],i.value]),l[0]){case 0:case 1:i=l;break;case 4:return a.label++,{value:l[1],done:!1};case 5:a.label++,r=l[1],l=[0];continue;case 7:l=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==l[0]&&2!==l[0])){a=0;continue}if(3===l[0]&&(!i||l[1]>i[0]&&l[1]<i[3])){a.label=l[1];break}if(6===l[0]&&a.label<i[1]){a.label=i[1],i=l;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(l);break}i[2]&&a.ops.pop(),a.trys.pop();continue}l=t.call(e,a)}catch(e){l=[6,e],r=0}finally{n=i=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(948);n(385);var a=function(){function e(e){this.props=e,this.tile=document.createElement("div"),this.setValue(),this.setClasses()}return e.prototype.setValue=function(){this.tile.innerText=String(this.props.value||"")},e.prototype.setClasses=function(){var e=this.props.value;this.tile.classList.add("tile"),e?this.tile.classList.add("tile-".concat(e)):this.tile.classList.add("empty")},e.prototype.getValue=function(){return this.props.value},e.prototype.slide=function(e,t){return r(this,void 0,void 0,(function(){var n,r,a,l=this;return i(this,(function(i){return n=(0,o.getFullWidth)(this.tile),r="horizontal"===e?"X":"Y",a=function(e){return"translate".concat(r,"(").concat(e,"px)")},[2,new Promise((function(e){l.tile.style.setProperty("--time","".concat(124,"ms")),l.tile.style.setProperty("--from",a(0)),l.tile.style.setProperty("--to",a(n*t)),l.tile.classList.add("slide"),setTimeout((function(){l.tile.removeAttribute("stile"),e(null)}),124)}))]}))}))},e.prototype.render=function(){return this.tile},e}();t.default=a},885:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0;var i=r(n(840));t.Tile=i.default},948:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFullWidth=void 0,t.getFullWidth=function(e){var t=window.getComputedStyle(e),n=parseInt(t.marginLeft,10),r=parseInt(t.marginRight,10);return e.offsetWidth+n+r}},785:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(126),t),i(n(885),t)},156:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(259);var i=r(n(638)),o=r(n(691)),a=r(n(642)),l=r(n(424));document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementById("root");new o.default;var t=new i.default(new a.default,new l.default);e.append(t.render())}))},830:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.compressArray=void 0,t.compressArray=function(e){for(var t=[],i=[],o=0;o<e.length;o++)if(e[o]){var a=t.pop();a===e[o]?t.push(a+e[o]):t.push.apply(t,r([],n(a?[a,e[o]]:[e[o]]),!1)),i.push(t.length-1-o)}else i.push(null);return{stack:r(r([],n(t),!1),n(Array(e.length-t.length).fill(0)),!1),shift:i}}},266:function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n(830)),s=a(n(728)),c=r(r({},l),s);t.default=c},728:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.transposeMatrix=t.arrayToMatrix=t.matrixToArray=void 0,t.matrixToArray=function(e){return e.reduce((function(e,t){return r(r([],n(e),!1),n(t),!1)}),[])},t.arrayToMatrix=function(e,t){for(var n=[],r=0;r<e.length;r+=t)n.push(e.slice(r,r+t));return n},t.transposeMatrix=function(e){return e.map((function(t,n){return e.map((function(e){return e[n]}))}))}},591:(e,t,n)=>{e.exports=n.p+"d0adfd843775b5defa0e.svg"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,n(156)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,