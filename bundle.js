(()=>{"use strict";var t={280:(t,e,r)=>{r.d(e,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([t.id,".grid{display:grid;grid-template-columns:repeat(4, 100px);grid-template-rows:repeat(4, 100px);gap:10px;position:relative}","",{version:3,sources:["webpack://./src/components/Grid/grid.scss"],names:[],mappings:"AAAA,MACE,YAAA,CACA,sCAAA,CACA,mCAAA,CACA,QAAA,CAEA,iBAAA",sourcesContent:[".grid {\n  display: grid;\n  grid-template-columns: repeat(4, 100px);\n  grid-template-rows: repeat(4, 100px);\n  gap: 10px;\n\n  position: relative;\n}"],sourceRoot:""}]);const s=a},316:(t,e,r)=>{r.d(e,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([t.id,".tile{width:100px;height:100px;background-color:gray;border-radius:5px;font-size:3rem;color:#fff;display:flex;align-items:center;justify-content:center}.tile.empty{background-color:#f8f8ff}.tile.slide{--time: 250;--from: 0;--to: 0;animation-name:slide;animation-duration:var(--time);animation-fill-mode:forwards}@keyframes slide{0%{transform:var(--from)}100%{transform:var(--to)}}","",{version:3,sources:["webpack://./src/components/Tile/tile.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAEA,MACE,WAAA,CACA,YAAA,CAEA,qBAAA,CACA,iBAAA,CAEA,cAAA,CACA,UAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,YACE,wBAAA,CAGF,YACE,WAAA,CACA,SAAA,CACA,OAAA,CCjBF,oBAAA,CACA,8BDkB+C,CCjB/C,4BAAA,CAPA,iBACE,GAAA,qBDuBqB,CCtBrB,KAAA,mBDsBkC,CAAA",sourcesContent:['@import "src/styles/mixins";\n\n.tile {\n  width: 100px;\n  height: 100px;\n\n  background-color: grey;\n  border-radius: 5px;\n\n  font-size: 3rem;\n  color: #FFF;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.empty {\n    background-color: ghostwhite;\n  }\n\n  &.slide {\n    --time: 250;\n    --from: 0;\n    --to: 0;\n\n    @include simpleSlide(var(--from), var(--to), var(--time))\n  }\n}',"@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}"],sourceRoot:""}]);const s=a},664:(t,e,r)=>{r.d(e,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([t.id,'*{margin:0;padding:0}html,body,#root{width:100vw;height:100vh;box-sizing:border-box;font-size:16px;font-family:"Roboto Light",sans-serif;display:flex;align-items:center;justify-content:center}',"",{version:3,sources:["webpack://./src/styles/main.scss"],names:[],mappings:"AAEA,EACE,QAAA,CACA,SAAA,CAGF,gBACE,WAAA,CACA,YAAA,CACA,qBAAA,CAEA,cAAA,CACA,qCAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA",sourcesContent:['@import "mixins";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, #root {\n  width: 100vw;\n  height: 100vh;\n  box-sizing: border-box;\n\n  font-size: 16px;\n  font-family: "Roboto Light", sans-serif;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n'],sourceRoot:""}]);const s=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);n&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),r&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=r):c[2]=r),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},354:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},493:(t,e,r)=>{r.r(e),r.d(e,{default:()=>m});var n=r(72),i=r.n(n),o=r(825),a=r.n(o),s=r(659),l=r.n(s),u=r(56),c=r.n(u),f=r(540),d=r.n(f),p=r(113),h=r.n(p),v=r(280),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=d(),i()(v.A,A);const m=v.A&&v.A.locals?v.A.locals:void 0},385:(t,e,r)=>{r.r(e),r.d(e,{default:()=>m});var n=r(72),i=r.n(n),o=r(825),a=r.n(o),s=r(659),l=r.n(s),u=r(56),c=r.n(u),f=r(540),d=r.n(f),p=r(113),h=r.n(p),v=r(316),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=d(),i()(v.A,A);const m=v.A&&v.A.locals?v.A.locals:void 0},259:(t,e,r)=>{r.r(e),r.d(e,{default:()=>m});var n=r(72),i=r.n(n),o=r(825),a=r.n(o),s=r(659),l=r.n(s),u=r(56),c=r.n(u),f=r(540),d=r.n(f),p=r(113),h=r.n(p),v=r(664),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=d(),i()(v.A,A);const m=v.A&&v.A.locals?v.A.locals:void 0},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],u=n.base?l[0]+n.base:l[0],c=o[u]||0,f="".concat(u," ").concat(c);o[u]=c+1;var d=r(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var h=i(p,n);n.byIndex=s,e.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var o=n(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=r(o[a]);e[s].references--}for(var l=n(t,i),u=0;u<o.length;u++){var c=r(o[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=l}}},659:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},638:function(t,e){var r=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{l(n.next(t))}catch(t){o(t)}}function s(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}l((n=n.apply(t,e||[])).next())}))},n=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameController=void 0;var i=function(){function t(t,e){var i=this;this.game=t,this.view=e,this.moveUp=function(){return r(i,void 0,void 0,(function(){var t,e,r;return n(this,(function(n){switch(n.label){case 0:return t=this.game.moveUp(),e=this.getNotEmptyTiles(),r=e.map((function(e,r){return e.slide("vertical",t[r])})),[4,Promise.all(r)];case 1:return n.sent(),[2]}}))}))},this.moveDown=function(){return r(i,void 0,void 0,(function(){var t,e,r;return n(this,(function(n){switch(n.label){case 0:return t=this.game.moveDown(),e=this.getNotEmptyTiles(),r=e.map((function(e,r){return e.slide("vertical",-1*t[r])})),[4,Promise.all(r)];case 1:return n.sent(),[2]}}))}))},this.moveLeft=function(){return r(i,void 0,void 0,(function(){var t,e,r;return n(this,(function(n){switch(n.label){case 0:return t=this.game.moveLeft(),e=this.getNotEmptyTiles(),r=e.map((function(e,r){return e.slide("horizontal",t[r])})),[4,Promise.all(r)];case 1:return n.sent(),[2]}}))}))},this.moveRight=function(){return r(i,void 0,void 0,(function(){var t,e,r;return n(this,(function(n){switch(n.label){case 0:return t=this.game.moveRight(),e=this.getNotEmptyTiles(),r=e.map((function(e,r){return e.slide("horizontal",-1*t[r])})),[4,Promise.all(r)];case 1:return n.sent(),[2]}}))}))},this.setKeydownListener(),this.view.renderTiles(this.game.getField())}return t.prototype.setKeydownListener=function(){var t=this,e={ArrowUp:this.moveUp,ArrowDown:this.moveDown,ArrowLeft:this.moveLeft,ArrowRight:this.moveRight};document.addEventListener("keydown",(function(i){return r(t,[i],void 0,(function(t){var r=t.key;return n(this,(function(t){switch(t.label){case 0:return r in e?[4,e[r]()]:[3,2];case 1:t.sent(),this.game.addRandomTile(),this.view.renderTiles(this.game.getField()),t.label=2;case 2:return[2]}}))}))}))},t.prototype.getNotEmptyTiles=function(){return this.view.getTilesList().filter((function(t){return t.getValue()}))},t.prototype.render=function(){return this.view.render()},t}();e.GameController=i},642:function(t,e,r){var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameModel=void 0;var a=o(r(266)),s=function(){function t(){var t=this;this.size=4,this.field=[],this.startGame=function(){t.setField(),t.addRandomTile(),t.addRandomTile()},this.moveUp=function(){var e=[],r=[];a.default.transposeMatrix(a.default.arrayToMatrix(t.getField(),t.size)).forEach((function(t){var n=a.default.compressArray(t),i=n.shift,o=n.stack;e.push(i),r.push(o)}));var n=a.default.matrixToArray(a.default.transposeMatrix(e)),i=a.default.matrixToArray(a.default.transposeMatrix(r));return t.updateField(i),n.filter((function(t){return null!==t}))},this.moveDown=function(){var e=[],r=[];a.default.transposeMatrix(a.default.arrayToMatrix(t.getField(),t.size)).forEach((function(t){var n=a.default.compressArray(t.reverse()),i=n.shift,o=n.stack;e.push(i.reverse()),r.push(o.reverse())}));var n=a.default.matrixToArray(a.default.transposeMatrix(e)),i=a.default.matrixToArray(a.default.transposeMatrix(r));return t.updateField(i),n.filter((function(t){return null!==t}))},this.moveLeft=function(){var e=[],r=[];return a.default.arrayToMatrix(t.getField(),t.size).forEach((function(t){var o=a.default.compressArray(t),s=o.shift,l=o.stack;e.push.apply(e,i([],n(s),!1)),r.push.apply(r,i([],n(l),!1))})),t.updateField(r),e.filter((function(t){return null!==t}))},this.moveRight=function(){var e=[],r=[];return a.default.arrayToMatrix(t.getField(),t.size).forEach((function(t){var o=a.default.compressArray(t.reverse()),s=o.shift,l=o.stack;e.push.apply(e,i([],n(s.reverse()),!1)),r.push.apply(r,i([],n(l.reverse()),!1))})),t.updateField(r),e.filter((function(t){return null!==t}))},this.startGame()}return t.prototype.setField=function(){this.field=Array(Math.pow(this.size,2)).fill(0)},t.prototype.updateField=function(t){this.field=i([],n(t),!1)},t.prototype.getField=function(){return i([],n(this.field),!1)},t.prototype.addRandomTile=function(){var t=[];if(this.field.forEach((function(e,r){return!e&&t.push(r)})),t.length){var e=t[Math.floor(Math.random()*t.length)];this.field[e]=Math.random()>.9?4:2}},t}();e.GameModel=s},424:function(t,e,r){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.GameView=void 0;var i=n(r(126)),o=n(r(885)),a=function(){function t(){this.tilesList=[],this.grid=(new i.default).render()}return t.prototype.setTilesList=function(t){var e=this;this.tilesList=[],t.forEach((function(t){return e.tilesList.push(new o.default({value:t}))}))},t.prototype.getTilesList=function(){return this.tilesList},t.prototype.renderTiles=function(t){var e=this;this.setTilesList(t),this.grid.innerHTML="",this.tilesList.forEach((function(t){return e.grid.append(t.render())}))},t.prototype.render=function(){return this.grid},t}();e.GameView=a},940:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Grid=void 0,r(493);var n=function(){function t(){this.grid=document.createElement("div"),this.grid.classList.add("grid")}return t.prototype.render=function(){return this.grid},t}();e.Grid=n},126:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(940);e.default=n.Grid},840:function(t,e,r){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function a(t){try{l(n.next(t))}catch(t){o(t)}}function s(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}l((n=n.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Tile=void 0,r(385);var o=function(){function t(t){this.props=t,this.tile=document.createElement("div"),this.setValue(),this.setClasses()}return t.prototype.setValue=function(){this.tile.innerText=String(this.props.value||"")},t.prototype.setClasses=function(){this.tile.classList.add("tile"),0===this.props.value&&this.tile.classList.add("empty")},t.prototype.getValue=function(){return this.props.value},t.prototype.slide=function(t,e){return n(this,void 0,void 0,(function(){var r,n,o=this;return i(this,(function(i){return r="horizontal"===t?"X":"Y",n=function(t){return"translate".concat(r,"(").concat(t,"px)")},[2,new Promise((function(t){o.tile.style.setProperty("--time","".concat(100,"ms")),o.tile.style.setProperty("--from",n(0)),o.tile.style.setProperty("--to",n(110*e)),o.tile.classList.add("slide"),setTimeout((function(){o.tile.removeAttribute("stile"),t(null)}),100)}))]}))}))},t.prototype.render=function(){return this.tile},t}();e.Tile=o},885:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(840);e.default=n.Tile},830:function(t,e){var r=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},n=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.compressArray=void 0,e.compressArray=function(t){for(var e=[],i=[],o=0;o<t.length;o++)if(t[o]){var a=e.pop();a===t[o]?e.push(a+t[o]):e.push.apply(e,n([],r(a?[a,t[o]]:[t[o]]),!1)),i.push(e.length-1-o)}else i.push(null);return{stack:n(n([],r(e),!1),r(Array(t.length-e.length).fill(0)),!1),shift:i}}},266:function(t,e,r){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var s=a(r(830)),l=a(r(728)),u=n(n({},s),l);e.default=u},728:function(t,e){var r=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},n=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.transposeMatrix=e.arrayToMatrix=e.matrixToArray=void 0,e.matrixToArray=function(t){return t.reduce((function(t,e){return n(n([],r(t),!1),r(e),!1)}),[])},e.arrayToMatrix=function(t,e){for(var r=[],n=0;n<t.length;n+=e)r.push(t.slice(n,n+e));return r},e.transposeMatrix=function(t){return t.map((function(e,r){return t.map((function(t){return t[r]}))}))}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nc=void 0,(()=>{r(259);var t=r(642),e=r(638),n=r(424);document.addEventListener("DOMContentLoaded",(function(){var r=document.getElementById("root"),i=new e.GameController(new t.GameModel,new n.GameView);r.append(i.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,