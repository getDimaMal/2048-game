(()=>{"use strict";var e={280:(e,t,n)=>{n.d(t,{A:()=>f});var r=n(354),i=n.n(r),o=n(314),a=n.n(o),s=n(417),l=n.n(s),c=new URL(n(591),n.b),u=a()(i()),d=l()(c);u.push([e.id,`.grid{width:22rem;height:22rem;box-sizing:unset;display:flex;flex-wrap:wrap;align-items:flex-start;align-content:flex-start;background-image:url(${d});background-repeat:space;background-size:5.5rem}`,"",{version:3,sources:["webpack://./src/components/Grid/grid.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,MAIE,WAFO,CAGP,YAHO,CAIP,gBAAA,CAEA,YAAA,CACA,cAAA,CACA,sBAAA,CACA,wBAAA,CAEA,wDCLW,CDMX,uBAAA,CACA,sBAdO",sourcesContent:['@import "src/styles/variables";\n\n.grid {\n  $tile: calc($tile-size + $tile-margin * 2);\n  $size: calc(4 * $tile);\n\n  width: $size;\n  height: $size;\n  box-sizing: unset;\n\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  align-content: flex-start;\n\n  background-image: $empty-tile;\n  background-repeat: space;\n  background-size: $tile;\n}',"$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #F08080;\n$background-color-tablet: #90EE90;\n$background-color-desktop: #ADD8E6;\n\n$tile-size: 5rem;\n$tile-margin: 0.25rem;\n$empty-tile: url(src/asset/empty-tile.svg)"],sourceRoot:""}]);const f=u},316:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([e.id,".tile{width:5rem;height:5rem;margin:.25rem;background-color:gray;border-radius:22%;font-size:2rem;color:#fff;display:flex;align-items:center;justify-content:center;flex:0 0 5rem}.tile.empty{background-color:inherit}.tile.slide{--time: 250;--from: 0;--to: 0;animation-name:slide;animation-duration:var(--time);animation-fill-mode:forwards}@keyframes slide{0%{transform:var(--from)}100%{transform:var(--to)}}","",{version:3,sources:["webpack://./src/components/Tile/tile.scss","webpack://./src/styles/_variables.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAGA,MACE,UCIU,CDHV,WCGU,CDDV,aCEY,CAAA,qBAAA,CDCZ,iBAAA,CAEA,cAAA,CACA,UAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,aAAA,CAEA,YACE,wBAAA,CAGF,YACE,WAAA,CACA,SAAA,CACA,OAAA,CEbF,oBAAA,CACA,8BFc+C,CEb/C,4BAAA,CAPA,iBACE,GAAA,qBFmBqB,CElBrB,KAAA,mBFkBkC,CAAA",sourcesContent:['@import "src/styles/mixins";\n@import "src/styles/variables";\n\n.tile {\n  width: $tile-size;\n  height: $tile-size;\n\n  margin: $tile-margin;\n\n  background-color: grey;\n  border-radius: 22%;\n\n  font-size: 2rem;\n  color: #FFFFFF;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 0 0 $tile-size;\n\n  &.empty {\n    background-color: inherit;\n  }\n\n  &.slide {\n    --time: 250;\n    --from: 0;\n    --to: 0;\n\n    @include simpleSlide(var(--from), var(--to), var(--time))\n  }\n}',"$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #F08080;\n$background-color-tablet: #90EE90;\n$background-color-desktop: #ADD8E6;\n\n$tile-size: 5rem;\n$tile-margin: 0.25rem;\n$empty-tile: url(src/asset/empty-tile.svg)",'@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}'],sourceRoot:""}]);const s=a},664:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),i=n.n(r),o=n(314),a=n.n(o)()(i());a.push([e.id,'*{margin:0;padding:0}html,body,#root{width:100%;height:100%;overflow-x:hidden;font-family:"Roboto Light",sans-serif}@media(max-width: 480px){html,body{font-size:14px}}@media(min-width: 481px)and (max-width: 768px){html,body{font-size:16px}}@media(min-width: 769px){html,body{font-size:18px}}#root{display:flex;flex-direction:column;align-items:center;justify-content:center}@media(max-width: 480px){#root{background-color:#f08080;overflow-y:scroll;-webkit-overflow-scrolling:touch}}@media(min-width: 481px)and (max-width: 768px){#root{background-color:#90ee90}}@media(min-width: 769px){#root{background-color:#add8e6}}',"",{version:3,sources:["webpack://./src/styles/main.scss","webpack://./src/styles/_mixins.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAIA,EACE,QAAA,CACA,SAAA,CAGF,gBACE,UAAA,CACA,WAAA,CAEA,iBAAA,CAEA,qCAAA,CCZA,yBDeF,UAEI,cAAA,CAAA,CCjBF,+CDeF,UAKI,cAAA,CAAA,CCpBF,yBDeF,UAQI,cAAA,CAAA,CAIJ,MACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CC/BA,yBD2BF,MAOI,wBEjCsB,CFmCtB,iBAAA,CACA,gCAAA,CAAA,CCrCF,+CD2BF,MAaI,wBEtCsB,CAAA,CDFxB,yBD2BF,MAgBI,wBExCuB,CAAA",sourcesContent:['@import "mixins";\n@import "variables";\n@import "functions";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, #root {\n  width: 100%;\n  height: 100%;\n\n  overflow-x: hidden; // Prevent horizontal scroll\n\n  font-family: "Roboto Light", sans-serif;\n}\n\nhtml, body {\n  @include respond-to("mobile") {\n    font-size: 14px;\n  }\n  @include respond-to("tablet") {\n    font-size: 16px;\n  }\n  @include respond-to("desktop") {\n    font-size: 18px;\n  }\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @include respond-to("mobile") {\n    background-color: $background-color-mobile;\n\n    overflow-y: scroll; // Allow vertical scroll on mobile devices\n    -webkit-overflow-scrolling: touch; // Smooth scrolling on touch devices\n  }\n  @include respond-to("tablet") {\n    background-color: $background-color-tablet;\n  }\n  @include respond-to("desktop") {\n    background-color: $background-color-desktop;\n  }\n}\n\n','@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}',"$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #F08080;\n$background-color-tablet: #90EE90;\n$background-color-desktop: #ADD8E6;\n\n$tile-size: 5rem;\n$tile-margin: 0.25rem;\n$empty-tile: url(src/asset/empty-tile.svg)"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},417:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},493:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),c=n(56),u=n.n(c),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(280),A={};A.styleTagTransform=h(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),i()(m.A,A);const y=m.A&&m.A.locals?m.A.locals:void 0},385:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),c=n(56),u=n.n(c),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(316),A={};A.styleTagTransform=h(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),i()(m.A,A);const y=m.A&&m.A.locals?m.A.locals:void 0},259:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var r=n(72),i=n.n(r),o=n(825),a=n.n(o),s=n(659),l=n.n(s),c=n(56),u=n.n(c),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(664),A={};A.styleTagTransform=h(),A.setAttributes=u(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),i()(m.A,A);const y=m.A&&m.A.locals?m.A.locals:void 0},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var f=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=i(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=l}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},638:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameController=void 0;var i=function(){function e(e,t){this.game=e,this.view=t,this.actions={ArrowUp:{action:this.game.moveUp,direction:"vertical",multiplier:1},ArrowDown:{action:this.game.moveDown,direction:"vertical",multiplier:-1},ArrowLeft:{action:this.game.moveLeft,direction:"horizontal",multiplier:1},ArrowRight:{action:this.game.moveRight,direction:"horizontal",multiplier:-1}},this.setKeydownListener(),this.view.renderTiles(this.game.getField())}return e.prototype.getNotEmptyTiles=function(){return this.view.getTilesList().filter((function(e){return e.getValue()}))},e.prototype.setKeydownListener=function(){var e=this;document.addEventListener("keydown",(function(t){return n(e,[t],void 0,(function(e){var t,n,i,o,a,s,l,c=e.key;return r(this,(function(e){switch(e.label){case 0:return c in this.actions?(t=this.actions[c],n=t.action,i=t.direction,o=t.multiplier,a=n(),s=this.getNotEmptyTiles(),l=s.map((function(e,t){return e.slide(i,a[t]*o)})),[4,Promise.all(l)]):[2];case 1:return e.sent(),a.filter((function(e){return!!e})).length&&this.game.addRandomTile(),this.view.renderTiles(this.game.getField()),[2]}}))}))}))},e.prototype.render=function(){return this.view.render()},e}();t.GameController=i},642:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameModel=void 0;var a=o(n(266)),s=function(){function e(){var e=this;this.size=4,this.field=[],this.startGame=function(){e.setField(),e.addRandomTile(),e.addRandomTile()},this.moveUp=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e),i=r.shift,o=r.stack;t.push(i),n.push(o)}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),i=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(i),r.filter((function(e){return null!==e}))},this.moveDown=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e.reverse()),i=r.shift,o=r.stack;t.push(i.reverse()),n.push(o.reverse())}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),i=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(i),r.filter((function(e){return null!==e}))},this.moveLeft=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var o=a.default.compressArray(e),s=o.shift,l=o.stack;t.push.apply(t,i([],r(s),!1)),n.push.apply(n,i([],r(l),!1))})),e.updateField(n),t.filter((function(e){return null!==e}))},this.moveRight=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var o=a.default.compressArray(e.reverse()),s=o.shift,l=o.stack;t.push.apply(t,i([],r(s.reverse()),!1)),n.push.apply(n,i([],r(l.reverse()),!1))})),e.updateField(n),t.filter((function(e){return null!==e}))},this.startGame()}return e.prototype.setField=function(){this.field=Array(Math.pow(this.size,2)).fill(0)},e.prototype.updateField=function(e){this.field=i([],r(e),!1)},e.prototype.getField=function(){return i([],r(this.field),!1)},e.prototype.addRandomTile=function(){var e=[];if(this.field.forEach((function(t,n){return!t&&e.push(n)})),e.length){var t=e[Math.floor(Math.random()*e.length)];this.field[t]=Math.random()>.9?4:2}},e}();t.GameModel=s},424:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameView=void 0;var i=r(n(126)),o=r(n(885)),a=function(){function e(){this.tilesList=[],this.grid=(new i.default).render()}return e.prototype.setTilesList=function(e){var t=this;this.tilesList=[],e.forEach((function(e){return t.tilesList.push(new o.default({value:e}))}))},e.prototype.getTilesList=function(){return this.tilesList},e.prototype.renderTiles=function(e){var t=this;this.setTilesList(e),this.grid.innerHTML="",this.tilesList.forEach((function(e){return t.grid.append(e.render())}))},e.prototype.render=function(){return this.grid},e}();t.GameView=a},940:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0,n(493);var r=function(){function e(){this.grid=document.createElement("div"),this.grid.classList.add("grid")}return e.prototype.render=function(){return this.grid},e}();t.Grid=r},126:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(940);t.default=r.Grid},840:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0,n(385);var o=n(948),a=function(){function e(e){this.props=e,this.tile=document.createElement("div"),this.setValue(),this.setClasses()}return e.prototype.setValue=function(){this.tile.innerText=String(this.props.value||"")},e.prototype.setClasses=function(){this.tile.classList.add("tile"),0===this.props.value&&this.tile.classList.add("empty")},e.prototype.getValue=function(){return this.props.value},e.prototype.slide=function(e,t){return r(this,void 0,void 0,(function(){var n,r,a,s=this;return i(this,(function(i){return n=(0,o.getFullWidth)(this.tile),r="horizontal"===e?"X":"Y",a=function(e){return"translate".concat(r,"(").concat(e,"px)")},[2,new Promise((function(e){s.tile.style.setProperty("--time","".concat(128,"ms")),s.tile.style.setProperty("--from",a(0)),s.tile.style.setProperty("--to",a(n*t)),s.tile.classList.add("slide"),setTimeout((function(){s.tile.removeAttribute("stile"),e(null)}),128)}))]}))}))},e.prototype.render=function(){return this.tile},e}();t.Tile=a},885:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(840);t.default=r.Tile},948:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFullWidth=void 0,t.getFullWidth=function(e){var t=window.getComputedStyle(e),n=parseInt(t.marginLeft,10),r=parseInt(t.marginRight,10);return e.offsetWidth+n+r}},830:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.compressArray=void 0,t.compressArray=function(e){for(var t=[],i=[],o=0;o<e.length;o++)if(e[o]){var a=t.pop();a===e[o]?t.push(a+e[o]):t.push.apply(t,r([],n(a?[a,e[o]]:[e[o]]),!1)),i.push(t.length-1-o)}else i.push(null);return{stack:r(r([],n(t),!1),n(Array(e.length-t.length).fill(0)),!1),shift:i}}},266:function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(t,n);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,i)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var s=a(n(830)),l=a(n(728)),c=r(r({},s),l);t.default=c},728:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.transposeMatrix=t.arrayToMatrix=t.matrixToArray=void 0,t.matrixToArray=function(e){return e.reduce((function(e,t){return r(r([],n(e),!1),n(t),!1)}),[])},t.arrayToMatrix=function(e,t){for(var n=[],r=0;r<e.length;r+=t)n.push(e.slice(r,r+t));return n},t.transposeMatrix=function(e){return e.map((function(t,n){return e.map((function(e){return e[n]}))}))}},591:(e,t,n)=>{e.exports=n.p+"1d26e4733b627f624643.svg"}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{n(259);var e=n(642),t=n(638),r=n(424);document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("root"),i=new t.GameController(new e.GameModel,new r.GameView);n.append(i.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUQsSUFBS0osRUFBVyxNQUFNLElBQUl0TSxNQUFNLHlEQUNoQ3NNLEVBQVlBLEVBQVU5UCxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRmtQLEVBQW9CdEIsRUFBSWtDLEMsS0NsQnhCWixFQUFvQm1CLEVBQUlyTixTQUFTc04sU0FBV0MsS0FBS1AsU0FBU1EsS0NBMUR0QixFQUFvQnVCLFFBQUt0UixFLE1DRXpCLEVBQVEsS0FDUixJQUFJdVIsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFvQixFQUFRLEtBQzVCQyxFQUFjLEVBQVEsS0FDMUI1TixTQUFTa0YsaUJBQWlCLG9CQUFvQixXQUMxQyxJQUFJMkksRUFBTzdOLFNBQVM4TixlQUFlLFFBQy9CaEssRUFBTyxJQUFJNkosRUFBa0I5SixlQUFlLElBQUk2SixFQUFhM0csVUFBYSxJQUFJNkcsRUFBWW5GLFVBQzlGb0YsRUFBSzdFLE9BQU9sRixFQUFLaUMsU0FDckIsRyIsInNvdXJjZXMiOlsid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9jb21wb25lbnRzL0dyaWQvZ3JpZC5zY3NzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9jb21wb25lbnRzL1RpbGUvdGlsZS5zY3NzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9zdHlsZXMvbWFpbi5zY3NzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9zcmMvY29tcG9uZW50cy9HcmlkL2dyaWQuc2Nzcz8yYjNkIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9jb21wb25lbnRzL1RpbGUvdGlsZS5zY3NzPzJjY2YiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vc3JjL3N0eWxlcy9tYWluLnNjc3M/NjljNyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9hcHAvY29udHJvbGxlcnMvZ2FtZS5jb250cm9sbGVyLnRzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9hcHAvbW9kZWxzL2dhbWUubW9kZWwudHMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vc3JjL2FwcC92aWV3cy9nYW1lLnZpZXcudHMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vc3JjL2NvbXBvbmVudHMvR3JpZC9HcmlkLnRzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9jb21wb25lbnRzL0dyaWQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vc3JjL2NvbXBvbmVudHMvVGlsZS9UaWxlLnRzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy9jb21wb25lbnRzL1RpbGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lLy4vc3JjL2NvbXBvbmVudHMvaGVscGVycy50cyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9zcmMvdXRpbHMvYXJyYXlzLnRzIiwid2VicGFjazovLzIwNDgtZ2FtZS8uL3NyYy91dGlscy9pbmRleC50cyIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9zcmMvdXRpbHMvbWF0cmljZXMudHMiLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLzIwNDgtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLzIwNDgtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovLzIwNDgtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLzIwNDgtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLzIwNDgtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vMjA0OC1nYW1lL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly8yMDQ4LWdhbWUvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcInNyYy9hc3NldC9lbXB0eS10aWxlLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmdyaWR7d2lkdGg6MjJyZW07aGVpZ2h0OjIycmVtO2JveC1zaXppbmc6dW5zZXQ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2FsaWduLWl0ZW1zOmZsZXgtc3RhcnQ7YWxpZ24tY29udGVudDpmbGV4LXN0YXJ0O2JhY2tncm91bmQtaW1hZ2U6dXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pO2JhY2tncm91bmQtcmVwZWF0OnNwYWNlO2JhY2tncm91bmQtc2l6ZTo1LjVyZW19YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9HcmlkL2dyaWQuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9fdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsTUFJRSxXQUZPLENBR1AsWUFITyxDQUlQLGdCQUFBLENBRUEsWUFBQSxDQUNBLGNBQUEsQ0FDQSxzQkFBQSxDQUNBLHdCQUFBLENBRUEsd0RDTFcsQ0RNWCx1QkFBQSxDQUNBLHNCQWRPXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcInNyYy9zdHlsZXMvdmFyaWFibGVzXFxcIjtcXG5cXG4uZ3JpZCB7XFxuICAkdGlsZTogY2FsYygkdGlsZS1zaXplICsgJHRpbGUtbWFyZ2luICogMik7XFxuICAkc2l6ZTogY2FsYyg0ICogJHRpbGUpO1xcblxcbiAgd2lkdGg6ICRzaXplO1xcbiAgaGVpZ2h0OiAkc2l6ZTtcXG4gIGJveC1zaXppbmc6IHVuc2V0O1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcXG5cXG4gIGJhY2tncm91bmQtaW1hZ2U6ICRlbXB0eS10aWxlO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IHNwYWNlO1xcbiAgYmFja2dyb3VuZC1zaXplOiAkdGlsZTtcXG59XCIsXCIkYnJlYWtwb2ludC1tb2JpbGU6IDQ4MHB4O1xcbiRicmVha3BvaW50LXRhYmxldDogNzY4cHg7XFxuJGJyZWFrcG9pbnQtZGVza3RvcDogMTAyNHB4O1xcblxcbiRiYWNrZ3JvdW5kLWNvbG9yLW1vYmlsZTogI0YwODA4MDtcXG4kYmFja2dyb3VuZC1jb2xvci10YWJsZXQ6ICM5MEVFOTA7XFxuJGJhY2tncm91bmQtY29sb3ItZGVza3RvcDogI0FERDhFNjtcXG5cXG4kdGlsZS1zaXplOiA1cmVtO1xcbiR0aWxlLW1hcmdpbjogMC4yNXJlbTtcXG4kZW1wdHktdGlsZTogdXJsKHNyYy9hc3NldC9lbXB0eS10aWxlLnN2ZylcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC50aWxle3dpZHRoOjVyZW07aGVpZ2h0OjVyZW07bWFyZ2luOi4yNXJlbTtiYWNrZ3JvdW5kLWNvbG9yOmdyYXk7Ym9yZGVyLXJhZGl1czoyMiU7Zm9udC1zaXplOjJyZW07Y29sb3I6I2ZmZjtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7ZmxleDowIDAgNXJlbX0udGlsZS5lbXB0eXtiYWNrZ3JvdW5kLWNvbG9yOmluaGVyaXR9LnRpbGUuc2xpZGV7LS10aW1lOiAyNTA7LS1mcm9tOiAwOy0tdG86IDA7YW5pbWF0aW9uLW5hbWU6c2xpZGU7YW5pbWF0aW9uLWR1cmF0aW9uOnZhcigtLXRpbWUpO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9QGtleWZyYW1lcyBzbGlkZXswJXt0cmFuc2Zvcm06dmFyKC0tZnJvbSl9MTAwJXt0cmFuc2Zvcm06dmFyKC0tdG8pfX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL1RpbGUvdGlsZS5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL192YXJpYWJsZXMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9fbWl4aW5zLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0EsTUFDRSxVQ0lVLENESFYsV0NHVSxDRERWLGFDRVksQ0FBQSxxQkFBQSxDRENaLGlCQUFBLENBRUEsY0FBQSxDQUNBLFVBQUEsQ0FFQSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFBQSxDQUNBLGFBQUEsQ0FFQSxZQUNFLHdCQUFBLENBR0YsWUFDRSxXQUFBLENBQ0EsU0FBQSxDQUNBLE9BQUEsQ0ViRixvQkFBQSxDQUNBLDhCRmMrQyxDRWIvQyw0QkFBQSxDQVBBLGlCQUNFLEdBQUEscUJGbUJxQixDRWxCckIsS0FBQSxtQkZrQmtDLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCBcXFwic3JjL3N0eWxlcy9taXhpbnNcXFwiO1xcbkBpbXBvcnQgXFxcInNyYy9zdHlsZXMvdmFyaWFibGVzXFxcIjtcXG5cXG4udGlsZSB7XFxuICB3aWR0aDogJHRpbGUtc2l6ZTtcXG4gIGhlaWdodDogJHRpbGUtc2l6ZTtcXG5cXG4gIG1hcmdpbjogJHRpbGUtbWFyZ2luO1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gIGJvcmRlci1yYWRpdXM6IDIyJTtcXG5cXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG4gIGNvbG9yOiAjRkZGRkZGO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGZsZXg6IDAgMCAkdGlsZS1zaXplO1xcblxcbiAgJi5lbXB0eSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XFxuICB9XFxuXFxuICAmLnNsaWRlIHtcXG4gICAgLS10aW1lOiAyNTA7XFxuICAgIC0tZnJvbTogMDtcXG4gICAgLS10bzogMDtcXG5cXG4gICAgQGluY2x1ZGUgc2ltcGxlU2xpZGUodmFyKC0tZnJvbSksIHZhcigtLXRvKSwgdmFyKC0tdGltZSkpXFxuICB9XFxufVwiLFwiJGJyZWFrcG9pbnQtbW9iaWxlOiA0ODBweDtcXG4kYnJlYWtwb2ludC10YWJsZXQ6IDc2OHB4O1xcbiRicmVha3BvaW50LWRlc2t0b3A6IDEwMjRweDtcXG5cXG4kYmFja2dyb3VuZC1jb2xvci1tb2JpbGU6ICNGMDgwODA7XFxuJGJhY2tncm91bmQtY29sb3ItdGFibGV0OiAjOTBFRTkwO1xcbiRiYWNrZ3JvdW5kLWNvbG9yLWRlc2t0b3A6ICNBREQ4RTY7XFxuXFxuJHRpbGUtc2l6ZTogNXJlbTtcXG4kdGlsZS1tYXJnaW46IDAuMjVyZW07XFxuJGVtcHR5LXRpbGU6IHVybChzcmMvYXNzZXQvZW1wdHktdGlsZS5zdmcpXCIsXCJAaW1wb3J0IFxcXCJmdW5jdGlvbnNcXFwiO1xcblxcbkBtaXhpbiByZXNwb25kLXRvKCRzaXplKSB7XFxuICBAbWVkaWEgI3tyZXNwb25zaXZlKCRzaXplKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQG1peGluIHNpbXBsZVNsaWRlKCRmcm9tLCAkdG8sICRkdXJhdGlvbikge1xcbiAgQGtleWZyYW1lcyBzbGlkZSB7XFxuICAgIDAlIHsgdHJhbnNmb3JtOiAkZnJvbTsgfVxcbiAgICAxMDAlIHsgdHJhbnNmb3JtOiAkdG87IH1cXG4gIH1cXG5cXG4gIGFuaW1hdGlvbi1uYW1lOiBzbGlkZTtcXG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogJGR1cmF0aW9uO1xcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKnttYXJnaW46MDtwYWRkaW5nOjB9aHRtbCxib2R5LCNyb290e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b3ZlcmZsb3cteDpoaWRkZW47Zm9udC1mYW1pbHk6XCJSb2JvdG8gTGlnaHRcIixzYW5zLXNlcmlmfUBtZWRpYShtYXgtd2lkdGg6IDQ4MHB4KXtodG1sLGJvZHl7Zm9udC1zaXplOjE0cHh9fUBtZWRpYShtaW4td2lkdGg6IDQ4MXB4KWFuZCAobWF4LXdpZHRoOiA3NjhweCl7aHRtbCxib2R5e2ZvbnQtc2l6ZToxNnB4fX1AbWVkaWEobWluLXdpZHRoOiA3NjlweCl7aHRtbCxib2R5e2ZvbnQtc2l6ZToxOHB4fX0jcm9vdHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfUBtZWRpYShtYXgtd2lkdGg6IDQ4MHB4KXsjcm9vdHtiYWNrZ3JvdW5kLWNvbG9yOiNmMDgwODA7b3ZlcmZsb3cteTpzY3JvbGw7LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2h9fUBtZWRpYShtaW4td2lkdGg6IDQ4MXB4KWFuZCAobWF4LXdpZHRoOiA3NjhweCl7I3Jvb3R7YmFja2dyb3VuZC1jb2xvcjojOTBlZTkwfX1AbWVkaWEobWluLXdpZHRoOiA3NjlweCl7I3Jvb3R7YmFja2dyb3VuZC1jb2xvcjojYWRkOGU2fX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvbWFpbi5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL19taXhpbnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9fdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUEsRUFDRSxRQUFBLENBQ0EsU0FBQSxDQUdGLGdCQUNFLFVBQUEsQ0FDQSxXQUFBLENBRUEsaUJBQUEsQ0FFQSxxQ0FBQSxDQ1pBLHlCRGVGLFVBRUksY0FBQSxDQUFBLENDakJGLCtDRGVGLFVBS0ksY0FBQSxDQUFBLENDcEJGLHlCRGVGLFVBUUksY0FBQSxDQUFBLENBSUosTUFDRSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxrQkFBQSxDQUNBLHNCQUFBLENDL0JBLHlCRDJCRixNQU9JLHdCRWpDc0IsQ0ZtQ3RCLGlCQUFBLENBQ0EsZ0NBQUEsQ0FBQSxDQ3JDRiwrQ0QyQkYsTUFhSSx3QkV0Q3NCLENBQUEsQ0RGeEIseUJEMkJGLE1BZ0JJLHdCRXhDdUIsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IFxcXCJtaXhpbnNcXFwiO1xcbkBpbXBvcnQgXFxcInZhcmlhYmxlc1xcXCI7XFxuQGltcG9ydCBcXFwiZnVuY3Rpb25zXFxcIjtcXG5cXG4qIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmh0bWwsIGJvZHksICNyb290IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcblxcbiAgb3ZlcmZsb3cteDogaGlkZGVuOyAvLyBQcmV2ZW50IGhvcml6b250YWwgc2Nyb2xsXFxuXFxuICBmb250LWZhbWlseTogXFxcIlJvYm90byBMaWdodFxcXCIsIHNhbnMtc2VyaWY7XFxufVxcblxcbmh0bWwsIGJvZHkge1xcbiAgQGluY2x1ZGUgcmVzcG9uZC10byhcXFwibW9iaWxlXFxcIikge1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICB9XFxuICBAaW5jbHVkZSByZXNwb25kLXRvKFxcXCJ0YWJsZXRcXFwiKSB7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gIH1cXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8oXFxcImRlc2t0b3BcXFwiKSB7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG4gIH1cXG59XFxuXFxuI3Jvb3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuICBAaW5jbHVkZSByZXNwb25kLXRvKFxcXCJtb2JpbGVcXFwiKSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRiYWNrZ3JvdW5kLWNvbG9yLW1vYmlsZTtcXG5cXG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsOyAvLyBBbGxvdyB2ZXJ0aWNhbCBzY3JvbGwgb24gbW9iaWxlIGRldmljZXNcXG4gICAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOyAvLyBTbW9vdGggc2Nyb2xsaW5nIG9uIHRvdWNoIGRldmljZXNcXG4gIH1cXG4gIEBpbmNsdWRlIHJlc3BvbmQtdG8oXFxcInRhYmxldFxcXCIpIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3ItdGFibGV0O1xcbiAgfVxcbiAgQGluY2x1ZGUgcmVzcG9uZC10byhcXFwiZGVza3RvcFxcXCIpIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQtY29sb3ItZGVza3RvcDtcXG4gIH1cXG59XFxuXFxuXCIsXCJAaW1wb3J0IFxcXCJmdW5jdGlvbnNcXFwiO1xcblxcbkBtaXhpbiByZXNwb25kLXRvKCRzaXplKSB7XFxuICBAbWVkaWEgI3tyZXNwb25zaXZlKCRzaXplKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQG1peGluIHNpbXBsZVNsaWRlKCRmcm9tLCAkdG8sICRkdXJhdGlvbikge1xcbiAgQGtleWZyYW1lcyBzbGlkZSB7XFxuICAgIDAlIHsgdHJhbnNmb3JtOiAkZnJvbTsgfVxcbiAgICAxMDAlIHsgdHJhbnNmb3JtOiAkdG87IH1cXG4gIH1cXG5cXG4gIGFuaW1hdGlvbi1uYW1lOiBzbGlkZTtcXG4gIGFuaW1hdGlvbi1kdXJhdGlvbjogJGR1cmF0aW9uO1xcbiAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XFxufVwiLFwiJGJyZWFrcG9pbnQtbW9iaWxlOiA0ODBweDtcXG4kYnJlYWtwb2ludC10YWJsZXQ6IDc2OHB4O1xcbiRicmVha3BvaW50LWRlc2t0b3A6IDEwMjRweDtcXG5cXG4kYmFja2dyb3VuZC1jb2xvci1tb2JpbGU6ICNGMDgwODA7XFxuJGJhY2tncm91bmQtY29sb3ItdGFibGV0OiAjOTBFRTkwO1xcbiRiYWNrZ3JvdW5kLWNvbG9yLWRlc2t0b3A6ICNBREQ4RTY7XFxuXFxuJHRpbGUtc2l6ZTogNXJlbTtcXG4kdGlsZS1tYXJnaW46IDAuMjVyZW07XFxuJGVtcHR5LXRpbGU6IHVybChzcmMvYXNzZXQvZW1wdHktdGlsZS5zdmcpXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ncmlkLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ncmlkLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RpbGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RpbGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2FtZUNvbnRyb2xsZXIgPSB2b2lkIDA7XG52YXIgR2FtZUNvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR2FtZUNvbnRyb2xsZXIoZ2FtZSwgdmlldykge1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLmFjdGlvbnMgPSB7XG4gICAgICAgICAgICBcIkFycm93VXBcIjogeyBhY3Rpb246IHRoaXMuZ2FtZS5tb3ZlVXAsIGRpcmVjdGlvbjogXCJ2ZXJ0aWNhbFwiLCBtdWx0aXBsaWVyOiAxIH0sXG4gICAgICAgICAgICBcIkFycm93RG93blwiOiB7IGFjdGlvbjogdGhpcy5nYW1lLm1vdmVEb3duLCBkaXJlY3Rpb246IFwidmVydGljYWxcIiwgbXVsdGlwbGllcjogLTEgfSxcbiAgICAgICAgICAgIFwiQXJyb3dMZWZ0XCI6IHsgYWN0aW9uOiB0aGlzLmdhbWUubW92ZUxlZnQsIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsIG11bHRpcGxpZXI6IDEgfSxcbiAgICAgICAgICAgIFwiQXJyb3dSaWdodFwiOiB7IGFjdGlvbjogdGhpcy5nYW1lLm1vdmVSaWdodCwgZGlyZWN0aW9uOiBcImhvcml6b250YWxcIiwgbXVsdGlwbGllcjogLTEgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRLZXlkb3duTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy52aWV3LnJlbmRlclRpbGVzKHRoaXMuZ2FtZS5nZXRGaWVsZCgpKTtcbiAgICB9XG4gICAgR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLmdldE5vdEVtcHR5VGlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VGlsZXNMaXN0KCkuZmlsdGVyKGZ1bmN0aW9uICh0aWxlKSB7IHJldHVybiB0aWxlLmdldFZhbHVlKCk7IH0pO1xuICAgIH07XG4gICAgR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnNldEtleWRvd25MaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKF9hKSB7IHJldHVybiBfX2F3YWl0ZXIoX3RoaXMsIFtfYV0sIHZvaWQgMCwgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICB2YXIgX2MsIGFjdGlvbiwgZGlyZWN0aW9uLCBtdWx0aXBsaWVyLCBzaGlmdHMsIHRpbGVzLCBwcm9taXNlcztcbiAgICAgICAgICAgIHZhciBrZXkgPSBfYi5rZXk7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9kKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gdGhpcy5hY3Rpb25zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXMuYWN0aW9uc1trZXldLCBhY3Rpb24gPSBfYy5hY3Rpb24sIGRpcmVjdGlvbiA9IF9jLmRpcmVjdGlvbiwgbXVsdGlwbGllciA9IF9jLm11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlmdHMgPSBhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVzID0gdGhpcy5nZXROb3RFbXB0eVRpbGVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IHRpbGVzLm1hcChmdW5jdGlvbiAodGlsZSwgaW5kZXgpIHsgcmV0dXJuIHRpbGUuc2xpZGUoZGlyZWN0aW9uLCBzaGlmdHNbaW5kZXhdICogbXVsdGlwbGllcik7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwocHJvbWlzZXMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Quc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoaWZ0cy5maWx0ZXIoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gISF2YWw7IH0pLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuYWRkUmFuZG9tVGlsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnJlbmRlclRpbGVzKHRoaXMuZ2FtZS5nZXRGaWVsZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IH0pO1xuICAgIH07XG4gICAgR2FtZUNvbnRyb2xsZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5yZW5kZXIoKTtcbiAgICB9O1xuICAgIHJldHVybiBHYW1lQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnRzLkdhbWVDb250cm9sbGVyID0gR2FtZUNvbnRyb2xsZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2FtZU1vZGVsID0gdm9pZCAwO1xudmFyIHV0aWxzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInNyYy91dGlsc1wiKSk7XG52YXIgR2FtZU1vZGVsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdhbWVNb2RlbCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zaXplID0gNDtcbiAgICAgICAgdGhpcy5maWVsZCA9IFtdO1xuICAgICAgICB0aGlzLnN0YXJ0R2FtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLnNldEZpZWxkKCk7XG4gICAgICAgICAgICBfdGhpcy5hZGRSYW5kb21UaWxlKCk7XG4gICAgICAgICAgICBfdGhpcy5hZGRSYW5kb21UaWxlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubW92ZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNoaWZ0TWF0cml4ID0gW107XG4gICAgICAgICAgICB2YXIgc3RhY2tNYXRyaXggPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSB1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHV0aWxzXzEuZGVmYXVsdC5hcnJheVRvTWF0cml4KF90aGlzLmdldEZpZWxkKCksIF90aGlzLnNpemUpKTtcbiAgICAgICAgICAgIG1hdHJpeC5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB1dGlsc18xLmRlZmF1bHQuY29tcHJlc3NBcnJheShyb3cpLCBzaGlmdCA9IF9hLnNoaWZ0LCBzdGFjayA9IF9hLnN0YWNrO1xuICAgICAgICAgICAgICAgIHNoaWZ0TWF0cml4LnB1c2goc2hpZnQpO1xuICAgICAgICAgICAgICAgIHN0YWNrTWF0cml4LnB1c2goc3RhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc2hpZnQgPSB1dGlsc18xLmRlZmF1bHQubWF0cml4VG9BcnJheSh1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHNoaWZ0TWF0cml4KSk7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSB1dGlsc18xLmRlZmF1bHQubWF0cml4VG9BcnJheSh1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHN0YWNrTWF0cml4KSk7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVGaWVsZChmaWVsZCk7XG4gICAgICAgICAgICByZXR1cm4gc2hpZnQuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgIT09IG51bGw7IH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1vdmVEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNoaWZ0TWF0cml4ID0gW107XG4gICAgICAgICAgICB2YXIgc3RhY2tNYXRyaXggPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSB1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHV0aWxzXzEuZGVmYXVsdC5hcnJheVRvTWF0cml4KF90aGlzLmdldEZpZWxkKCksIF90aGlzLnNpemUpKTtcbiAgICAgICAgICAgIG1hdHJpeC5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB1dGlsc18xLmRlZmF1bHQuY29tcHJlc3NBcnJheShyb3cucmV2ZXJzZSgpKSwgc2hpZnQgPSBfYS5zaGlmdCwgc3RhY2sgPSBfYS5zdGFjaztcbiAgICAgICAgICAgICAgICBzaGlmdE1hdHJpeC5wdXNoKHNoaWZ0LnJldmVyc2UoKSk7XG4gICAgICAgICAgICAgICAgc3RhY2tNYXRyaXgucHVzaChzdGFjay5yZXZlcnNlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgc2hpZnQgPSB1dGlsc18xLmRlZmF1bHQubWF0cml4VG9BcnJheSh1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHNoaWZ0TWF0cml4KSk7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSB1dGlsc18xLmRlZmF1bHQubWF0cml4VG9BcnJheSh1dGlsc18xLmRlZmF1bHQudHJhbnNwb3NlTWF0cml4KHN0YWNrTWF0cml4KSk7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVGaWVsZChmaWVsZCk7XG4gICAgICAgICAgICByZXR1cm4gc2hpZnQuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgIT09IG51bGw7IH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm1vdmVMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNoaWZ0ID0gW107XG4gICAgICAgICAgICB2YXIgZmllbGQgPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXRyaXggPSB1dGlsc18xLmRlZmF1bHQuYXJyYXlUb01hdHJpeChfdGhpcy5nZXRGaWVsZCgpLCBfdGhpcy5zaXplKTtcbiAgICAgICAgICAgIG1hdHJpeC5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSB1dGlsc18xLmRlZmF1bHQuY29tcHJlc3NBcnJheShyb3cpLCBuZXdTaGlmdCA9IF9hLnNoaWZ0LCBuZXdGaWVsZCA9IF9hLnN0YWNrO1xuICAgICAgICAgICAgICAgIHNoaWZ0LnB1c2guYXBwbHkoc2hpZnQsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChuZXdTaGlmdCksIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgZmllbGQucHVzaC5hcHBseShmaWVsZCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKG5ld0ZpZWxkKSwgZmFsc2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMudXBkYXRlRmllbGQoZmllbGQpO1xuICAgICAgICAgICAgcmV0dXJuIHNoaWZ0LmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlICE9PSBudWxsOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb3ZlUmlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2hpZnQgPSBbXTtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IFtdO1xuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHV0aWxzXzEuZGVmYXVsdC5hcnJheVRvTWF0cml4KF90aGlzLmdldEZpZWxkKCksIF90aGlzLnNpemUpO1xuICAgICAgICAgICAgbWF0cml4LmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IHV0aWxzXzEuZGVmYXVsdC5jb21wcmVzc0FycmF5KHJvdy5yZXZlcnNlKCkpLCBuZXdTaGlmdCA9IF9hLnNoaWZ0LCBuZXdGaWVsZCA9IF9hLnN0YWNrO1xuICAgICAgICAgICAgICAgIHNoaWZ0LnB1c2guYXBwbHkoc2hpZnQsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChuZXdTaGlmdC5yZXZlcnNlKCkpLCBmYWxzZSkpO1xuICAgICAgICAgICAgICAgIGZpZWxkLnB1c2guYXBwbHkoZmllbGQsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChuZXdGaWVsZC5yZXZlcnNlKCkpLCBmYWxzZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy51cGRhdGVGaWVsZChmaWVsZCk7XG4gICAgICAgICAgICByZXR1cm4gc2hpZnQuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgIT09IG51bGw7IH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0YXJ0R2FtZSgpO1xuICAgIH1cbiAgICBHYW1lTW9kZWwucHJvdG90eXBlLnNldEZpZWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZpZWxkID0gQXJyYXkoTWF0aC5wb3codGhpcy5zaXplLCAyKSkuZmlsbCgwKTtcbiAgICB9O1xuICAgIEdhbWVNb2RlbC5wcm90b3R5cGUudXBkYXRlRmllbGQgPSBmdW5jdGlvbiAobmV3RmllbGQpIHtcbiAgICAgICAgdGhpcy5maWVsZCA9IF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChuZXdGaWVsZCksIGZhbHNlKTtcbiAgICB9O1xuICAgIEdhbWVNb2RlbC5wcm90b3R5cGUuZ2V0RmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQodGhpcy5maWVsZCksIGZhbHNlKTtcbiAgICB9O1xuICAgIEdhbWVNb2RlbC5wcm90b3R5cGUuYWRkUmFuZG9tVGlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5VGlsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5maWVsZC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsgcmV0dXJuICF2YWx1ZSAmJiBlbXB0eVRpbGVzLnB1c2goaW5kZXgpOyB9KTtcbiAgICAgICAgaWYgKGVtcHR5VGlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBlbXB0eVRpbGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGVtcHR5VGlsZXMubGVuZ3RoKV07XG4gICAgICAgICAgICB0aGlzLmZpZWxkW2luZGV4XSA9IE1hdGgucmFuZG9tKCkgPiAwLjkgPyA0IDogMjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEdhbWVNb2RlbDtcbn0oKSk7XG5leHBvcnRzLkdhbWVNb2RlbCA9IEdhbWVNb2RlbDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HYW1lVmlldyA9IHZvaWQgMDtcbnZhciBHcmlkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2NvbXBvbmVudHMvR3JpZFwiKSk7XG52YXIgVGlsZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL1RpbGVcIikpO1xudmFyIEdhbWVWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdhbWVWaWV3KCkge1xuICAgICAgICB0aGlzLnRpbGVzTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLmdyaWQgPSBuZXcgR3JpZF8xLmRlZmF1bHQoKS5yZW5kZXIoKTtcbiAgICB9XG4gICAgR2FtZVZpZXcucHJvdG90eXBlLnNldFRpbGVzTGlzdCA9IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnRpbGVzTGlzdCA9IFtdO1xuICAgICAgICBmaWVsZC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gX3RoaXMudGlsZXNMaXN0LnB1c2gobmV3IFRpbGVfMS5kZWZhdWx0KHsgdmFsdWU6IHZhbHVlIH0pKTsgfSk7XG4gICAgfTtcbiAgICBHYW1lVmlldy5wcm90b3R5cGUuZ2V0VGlsZXNMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWxlc0xpc3Q7XG4gICAgfTtcbiAgICBHYW1lVmlldy5wcm90b3R5cGUucmVuZGVyVGlsZXMgPSBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zZXRUaWxlc0xpc3QoZmllbGQpO1xuICAgICAgICB0aGlzLmdyaWQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMudGlsZXNMaXN0LmZvckVhY2goZnVuY3Rpb24gKHRpbGUpIHsgcmV0dXJuIF90aGlzLmdyaWQuYXBwZW5kKHRpbGUucmVuZGVyKCkpOyB9KTtcbiAgICB9O1xuICAgIEdhbWVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWQ7XG4gICAgfTtcbiAgICByZXR1cm4gR2FtZVZpZXc7XG59KCkpO1xuZXhwb3J0cy5HYW1lVmlldyA9IEdhbWVWaWV3O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdyaWQgPSB2b2lkIDA7XG5yZXF1aXJlKFwiLi9ncmlkLnNjc3NcIik7XG52YXIgR3JpZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcmlkKCkge1xuICAgICAgICB0aGlzLmdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmdyaWQuY2xhc3NMaXN0LmFkZChcImdyaWRcIik7XG4gICAgfVxuICAgIEdyaWQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZDtcbiAgICB9O1xuICAgIHJldHVybiBHcmlkO1xufSgpKTtcbmV4cG9ydHMuR3JpZCA9IEdyaWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBHcmlkXzEgPSByZXF1aXJlKFwiLi9HcmlkXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gR3JpZF8xLkdyaWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVGlsZSA9IHZvaWQgMDtcbnJlcXVpcmUoXCIuL3RpbGUuc2Nzc1wiKTtcbnZhciBoZWxwZXJzXzEgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBUaWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRpbGUocHJvcHMpIHtcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLnRpbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLnNldFZhbHVlKCk7XG4gICAgICAgIHRoaXMuc2V0Q2xhc3NlcygpO1xuICAgIH1cbiAgICBUaWxlLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aWxlLmlubmVyVGV4dCA9IFN0cmluZyh0aGlzLnByb3BzLnZhbHVlIHx8IFwiXCIpO1xuICAgIH07XG4gICAgVGlsZS5wcm90b3R5cGUuc2V0Q2xhc3NlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50aWxlLmNsYXNzTGlzdC5hZGQoXCJ0aWxlXCIpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSA9PT0gMClcbiAgICAgICAgICAgIHRoaXMudGlsZS5jbGFzc0xpc3QuYWRkKFwiZW1wdHlcIik7XG4gICAgfTtcbiAgICBUaWxlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMudmFsdWU7XG4gICAgfTtcbiAgICBUaWxlLnByb3RvdHlwZS5zbGlkZSA9IGZ1bmN0aW9uIChkaXJlY3Rpb24sIHNoaWZ0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aW1lLCB3aWR0aCwgYXhpcywgZ2V0VHJhbnNsYXRlO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gMTI4O1xuICAgICAgICAgICAgICAgIHdpZHRoID0gKDAsIGhlbHBlcnNfMS5nZXRGdWxsV2lkdGgpKHRoaXMudGlsZSk7XG4gICAgICAgICAgICAgICAgYXhpcyA9IGRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBcIlhcIiA6IFwiWVwiO1xuICAgICAgICAgICAgICAgIGdldFRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gXCJ0cmFuc2xhdGVcIi5jb25jYXQoYXhpcywgXCIoXCIpLmNvbmNhdCh2YWx1ZSwgXCJweClcIik7IH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50aWxlLnN0eWxlLnNldFByb3BlcnR5KFwiLS10aW1lXCIsIFwiXCIuY29uY2F0KHRpbWUsIFwibXNcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGlsZS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tZnJvbVwiLCBnZXRUcmFuc2xhdGUoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGlsZS5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tdG9cIiwgZ2V0VHJhbnNsYXRlKHdpZHRoICogc2hpZnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRpbGUuY2xhc3NMaXN0LmFkZChcInNsaWRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdGlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRpbGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGlsZTtcbiAgICB9O1xuICAgIHJldHVybiBUaWxlO1xufSgpKTtcbmV4cG9ydHMuVGlsZSA9IFRpbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBUaWxlXzEgPSByZXF1aXJlKFwiLi9UaWxlXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGlsZV8xLlRpbGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RnVsbFdpZHRoID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0RnVsbFdpZHRoKGVsZW1lbnQpIHtcbiAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0LCAxMCk7XG4gICAgdmFyIG1hcmdpblJpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCwgMTApO1xuICAgIHZhciBlbGVtZW50V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgIHJldHVybiBlbGVtZW50V2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG59XG5leHBvcnRzLmdldEZ1bGxXaWR0aCA9IGdldEZ1bGxXaWR0aDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21wcmVzc0FycmF5ID0gdm9pZCAwO1xuZnVuY3Rpb24gY29tcHJlc3NBcnJheShhcnIpIHtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgc2hpZnQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWFycltpXSkge1xuICAgICAgICAgICAgc2hpZnQucHVzaChudWxsKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsYXN0ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIGlmIChsYXN0ID09PSBhcnJbaV0pXG4gICAgICAgICAgICBzdGFjay5wdXNoKGxhc3QgKyBhcnJbaV0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdGFjay5wdXNoLmFwcGx5KHN0YWNrLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoKGxhc3QgPyBbbGFzdCwgYXJyW2ldXSA6IFthcnJbaV1dKSksIGZhbHNlKSk7XG4gICAgICAgIHNoaWZ0LnB1c2goc3RhY2subGVuZ3RoIC0gMSAtIGkpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFjazogX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoc3RhY2spLCBmYWxzZSksIF9fcmVhZCgoQXJyYXkoYXJyLmxlbmd0aCAtIHN0YWNrLmxlbmd0aCkuZmlsbCgwKSkpLCBmYWxzZSksXG4gICAgICAgIHNoaWZ0OiBzaGlmdCxcbiAgICB9O1xufVxuZXhwb3J0cy5jb21wcmVzc0FycmF5ID0gY29tcHJlc3NBcnJheTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGFycmF5cyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcnJheXNcIikpO1xudmFyIG1hdHJpY2VzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21hdHJpY2VzXCIpKTtcbnZhciBVdGlscyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBhcnJheXMpLCBtYXRyaWNlcyk7XG5leHBvcnRzLmRlZmF1bHQgPSBVdGlscztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50cmFuc3Bvc2VNYXRyaXggPSBleHBvcnRzLmFycmF5VG9NYXRyaXggPSBleHBvcnRzLm1hdHJpeFRvQXJyYXkgPSB2b2lkIDA7XG5mdW5jdGlvbiBtYXRyaXhUb0FycmF5KG1hdHJpeCkge1xuICAgIHJldHVybiBtYXRyaXgucmVkdWNlKGZ1bmN0aW9uIChyZXMsIHJvdykgeyByZXR1cm4gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocmVzKSwgZmFsc2UpLCBfX3JlYWQocm93KSwgZmFsc2UpOyB9LCBbXSk7XG59XG5leHBvcnRzLm1hdHJpeFRvQXJyYXkgPSBtYXRyaXhUb0FycmF5O1xuZnVuY3Rpb24gYXJyYXlUb01hdHJpeChhcnJheSwgc2l6ZSkge1xuICAgIHZhciBtYXRyaXggPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSBzaXplKSB7XG4gICAgICAgIG1hdHJpeC5wdXNoKGFycmF5LnNsaWNlKGksIGkgKyBzaXplKSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG59XG5leHBvcnRzLmFycmF5VG9NYXRyaXggPSBhcnJheVRvTWF0cml4O1xuZnVuY3Rpb24gdHJhbnNwb3NlTWF0cml4KG1hdHJpeCkge1xuICAgIHJldHVybiBtYXRyaXgubWFwKGZ1bmN0aW9uIChfLCBjb2xJbmRleCkgeyByZXR1cm4gbWF0cml4Lm1hcChmdW5jdGlvbiAocm93KSB7IHJldHVybiByb3dbY29sSW5kZXhdOyB9KTsgfSk7XG59XG5leHBvcnRzLnRyYW5zcG9zZU1hdHJpeCA9IHRyYW5zcG9zZU1hdHJpeDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDc5MjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5yZXF1aXJlKFwiLi9zdHlsZXMvbWFpbi5zY3NzXCIpO1xudmFyIGdhbWVfbW9kZWxfMSA9IHJlcXVpcmUoXCIuL2FwcC9tb2RlbHMvZ2FtZS5tb2RlbFwiKTtcbnZhciBnYW1lX2NvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2FwcC9jb250cm9sbGVycy9nYW1lLmNvbnRyb2xsZXJcIik7XG52YXIgZ2FtZV92aWV3XzEgPSByZXF1aXJlKFwiLi9hcHAvdmlld3MvZ2FtZS52aWV3XCIpO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG4gICAgdmFyIGdhbWUgPSBuZXcgZ2FtZV9jb250cm9sbGVyXzEuR2FtZUNvbnRyb2xsZXIobmV3IGdhbWVfbW9kZWxfMS5HYW1lTW9kZWwoKSwgbmV3IGdhbWVfdmlld18xLkdhbWVWaWV3KCkpO1xuICAgIHJvb3QuYXBwZW5kKGdhbWUucmVuZGVyKCkpO1xufSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibG9jYWxzIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiVHlwZUVycm9yIiwiY2FsbCIsInBvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiR2FtZUNvbnRyb2xsZXIiLCJnYW1lIiwidmlldyIsImFjdGlvbnMiLCJhY3Rpb24iLCJtb3ZlVXAiLCJkaXJlY3Rpb24iLCJtdWx0aXBsaWVyIiwibW92ZURvd24iLCJtb3ZlTGVmdCIsIm1vdmVSaWdodCIsInNldEtleWRvd25MaXN0ZW5lciIsInJlbmRlclRpbGVzIiwiZ2V0RmllbGQiLCJwcm90b3R5cGUiLCJnZXROb3RFbXB0eVRpbGVzIiwiZ2V0VGlsZXNMaXN0IiwiZmlsdGVyIiwidGlsZSIsImdldFZhbHVlIiwiX3RoaXMiLCJhZGRFdmVudExpc3RlbmVyIiwiX2EiLCJfYiIsIl9jIiwic2hpZnRzIiwidGlsZXMiLCJwcm9taXNlcyIsImtleSIsIl9kIiwic2xpZGUiLCJhbGwiLCJ2YWwiLCJhZGRSYW5kb21UaWxlIiwicmVuZGVyIiwiX19yZWFkIiwibyIsIm0iLCJyIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwiYXJndW1lbnRzIiwibCIsIkFycmF5IiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiR2FtZU1vZGVsIiwidXRpbHNfMSIsInNpemUiLCJmaWVsZCIsInN0YXJ0R2FtZSIsInNldEZpZWxkIiwic2hpZnRNYXRyaXgiLCJzdGFja01hdHJpeCIsInRyYW5zcG9zZU1hdHJpeCIsImFycmF5VG9NYXRyaXgiLCJmb3JFYWNoIiwicm93IiwiY29tcHJlc3NBcnJheSIsInNoaWZ0Iiwic3RhY2siLCJtYXRyaXhUb0FycmF5IiwidXBkYXRlRmllbGQiLCJyZXZlcnNlIiwibmV3U2hpZnQiLCJuZXdGaWVsZCIsIk1hdGgiLCJwb3ciLCJmaWxsIiwiZW1wdHlUaWxlcyIsImZsb29yIiwicmFuZG9tIiwiR2FtZVZpZXciLCJHcmlkXzEiLCJUaWxlXzEiLCJ0aWxlc0xpc3QiLCJncmlkIiwic2V0VGlsZXNMaXN0IiwiaW5uZXJIVE1MIiwiYXBwZW5kIiwiR3JpZCIsImNsYXNzTGlzdCIsImFkZCIsIlRpbGUiLCJoZWxwZXJzXzEiLCJwcm9wcyIsInNldFZhbHVlIiwic2V0Q2xhc3NlcyIsImlubmVyVGV4dCIsIndpZHRoIiwiYXhpcyIsImdldFRyYW5zbGF0ZSIsImdldEZ1bGxXaWR0aCIsInNldFByb3BlcnR5Iiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwibWFyZ2luTGVmdCIsInBhcnNlSW50IiwibWFyZ2luUmlnaHQiLCJvZmZzZXRXaWR0aCIsImFyciIsImxhc3QiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInMiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJrMiIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2ltcG9ydFN0YXIiLCJhcnJheXMiLCJtYXRyaWNlcyIsIlV0aWxzIiwibWF0cml4IiwicmVkdWNlIiwicmVzIiwiYXJyYXkiLCJjb2xJbmRleCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiZ2FtZV9tb2RlbF8xIiwiZ2FtZV9jb250cm9sbGVyXzEiLCJnYW1lX3ZpZXdfMSIsInJvb3QiLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=