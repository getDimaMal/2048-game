(()=>{"use strict";var e={280:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,".grid{display:grid;grid-template-columns:repeat(4, 5rem);grid-template-rows:repeat(4, 5rem);gap:.6rem;position:relative}","",{version:3,sources:["webpack://./src/components/Grid/grid.scss"],names:[],mappings:"AAAA,MACE,YAAA,CACA,qCAAA,CACA,kCAAA,CACA,SAAA,CAEA,iBAAA",sourcesContent:[".grid {\n  display: grid;\n  grid-template-columns: repeat(4, 5rem);\n  grid-template-rows: repeat(4, 5rem);\n  gap: 0.6rem;\n\n  position: relative;\n}"],sourceRoot:""}]);const s=a},316:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,".tile{width:5rem;height:5rem;background-color:gray;border-radius:5px;font-size:3rem;color:#fff;display:flex;align-items:center;justify-content:center}.tile.empty{background-color:#f8f8ff}.tile.slide{--time: 250;--from: 0;--to: 0;animation-name:slide;animation-duration:var(--time);animation-fill-mode:forwards}@keyframes slide{0%{transform:var(--from)}100%{transform:var(--to)}}","",{version:3,sources:["webpack://./src/components/Tile/tile.scss","webpack://./src/styles/_mixins.scss"],names:[],mappings:"AAEA,MACE,UAAA,CACA,WAAA,CAEA,qBAAA,CACA,iBAAA,CAEA,cAAA,CACA,UAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,YACE,wBAAA,CAGF,YACE,WAAA,CACA,SAAA,CACA,OAAA,CCTF,oBAAA,CACA,8BDU+C,CCT/C,4BAAA,CAPA,iBACE,GAAA,qBDeqB,CCdrB,KAAA,mBDckC,CAAA",sourcesContent:['@import "src/styles/mixins";\n\n.tile {\n  width: 5rem;\n  height: 5rem;\n\n  background-color: grey;\n  border-radius: 5px;\n\n  font-size: 3rem;\n  color: #FFF;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.empty {\n    background-color: ghostwhite;\n  }\n\n  &.slide {\n    --time: 250;\n    --from: 0;\n    --to: 0;\n\n    @include simpleSlide(var(--from), var(--to), var(--time))\n  }\n}','@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}'],sourceRoot:""}]);const s=a},664:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,'*{margin:0;padding:0}html,body,#root{width:100%;height:100%;overflow-x:hidden;font-family:"Roboto Light",sans-serif}@media(max-width: 480px){html,body{font-size:14px}}@media(min-width: 481px)and (max-width: 768px){html,body{font-size:16px}}@media(min-width: 769px){html,body{font-size:18px}}#root{display:flex;flex-direction:column;align-items:center;justify-content:center}@media(max-width: 480px){#root{background-color:#f08080;overflow-y:scroll;-webkit-overflow-scrolling:touch}}@media(min-width: 481px)and (max-width: 768px){#root{background-color:#90ee90}}@media(min-width: 769px){#root{background-color:#add8e6}}',"",{version:3,sources:["webpack://./src/styles/main.scss","webpack://./src/styles/_mixins.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAIA,EACE,QAAA,CACA,SAAA,CAGF,gBACE,UAAA,CACA,WAAA,CAEA,iBAAA,CAEA,qCAAA,CCZA,yBDeF,UAEI,cAAA,CAAA,CCjBF,+CDeF,UAKI,cAAA,CAAA,CCpBF,yBDeF,UAQI,cAAA,CAAA,CAIJ,MACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CC/BA,yBD2BF,MAOI,wBEjCsB,CFmCtB,iBAAA,CACA,gCAAA,CAAA,CCrCF,+CD2BF,MAaI,wBEtCsB,CAAA,CDFxB,yBD2BF,MAgBI,wBExCuB,CAAA",sourcesContent:['@import "mixins";\n@import "variables";\n@import "functions";\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, #root {\n  width: 100%;\n  height: 100%;\n\n  overflow-x: hidden; // Prevent horizontal scroll\n\n  font-family: "Roboto Light", sans-serif;\n}\n\nhtml, body {\n  @include respond-to("mobile") {\n    font-size: 14px;\n  }\n  @include respond-to("tablet") {\n    font-size: 16px;\n  }\n  @include respond-to("desktop") {\n    font-size: 18px;\n  }\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  @include respond-to("mobile") {\n    background-color: $background-color-mobile;\n\n    overflow-y: scroll; // Allow vertical scroll on mobile devices\n    -webkit-overflow-scrolling: touch; // Smooth scrolling on touch devices\n  }\n  @include respond-to("tablet") {\n    background-color: $background-color-tablet;\n  }\n  @include respond-to("desktop") {\n    background-color: $background-color-desktop;\n  }\n}\n\n','@import "functions";\n\n@mixin respond-to($size) {\n  @media #{responsive($size)} {\n    @content;\n  }\n}\n\n@mixin simpleSlide($from, $to, $duration) {\n  @keyframes slide {\n    0% { transform: $from; }\n    100% { transform: $to; }\n  }\n\n  animation-name: slide;\n  animation-duration: $duration;\n  animation-fill-mode: forwards;\n}',"$breakpoint-mobile: 480px;\n$breakpoint-tablet: 768px;\n$breakpoint-desktop: 1024px;\n\n$background-color-mobile: #F08080;\n$background-color-tablet: #90EE90;\n$background-color-desktop: #ADD8E6;"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},493:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),o=n.n(r),i=n(825),a=n.n(i),s=n(659),l=n.n(s),u=n(56),c=n.n(u),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(280),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),o()(m.A,A);const v=m.A&&m.A.locals?m.A.locals:void 0},385:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),o=n.n(r),i=n(825),a=n.n(i),s=n(659),l=n.n(s),u=n(56),c=n.n(u),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(316),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),o()(m.A,A);const v=m.A&&m.A.locals?m.A.locals:void 0},259:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=n(72),o=n.n(r),i=n(825),a=n.n(i),s=n(659),l=n.n(s),u=n(56),c=n.n(u),d=n(540),f=n.n(d),p=n(113),h=n.n(p),m=n(664),A={};A.styleTagTransform=h(),A.setAttributes=c(),A.insert=l().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=f(),o()(m.A,A);const v=m.A&&m.A.locals?m.A.locals:void 0},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var f=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},638:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameController=void 0;var o=function(){function e(e,t){var o=this;this.game=e,this.view=t,this.moveUp=function(){return n(o,void 0,void 0,(function(){var e,t,n;return r(this,(function(r){switch(r.label){case 0:return e=this.game.moveUp(),t=this.getNotEmptyTiles(),n=t.map((function(t,n){return t.slide("vertical",e[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveDown=function(){return n(o,void 0,void 0,(function(){var e,t,n;return r(this,(function(r){switch(r.label){case 0:return e=this.game.moveDown(),t=this.getNotEmptyTiles(),n=t.map((function(t,n){return t.slide("vertical",-1*e[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveLeft=function(){return n(o,void 0,void 0,(function(){var e,t,n;return r(this,(function(r){switch(r.label){case 0:return e=this.game.moveLeft(),t=this.getNotEmptyTiles(),n=t.map((function(t,n){return t.slide("horizontal",e[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.moveRight=function(){return n(o,void 0,void 0,(function(){var e,t,n;return r(this,(function(r){switch(r.label){case 0:return e=this.game.moveRight(),t=this.getNotEmptyTiles(),n=t.map((function(t,n){return t.slide("horizontal",-1*e[n])})),[4,Promise.all(n)];case 1:return r.sent(),[2]}}))}))},this.setKeydownListener(),this.view.renderTiles(this.game.getField())}return e.prototype.setKeydownListener=function(){var e=this,t={ArrowUp:this.moveUp,ArrowDown:this.moveDown,ArrowLeft:this.moveLeft,ArrowRight:this.moveRight};document.addEventListener("keydown",(function(o){return n(e,[o],void 0,(function(e){var n=e.key;return r(this,(function(e){switch(e.label){case 0:return n in t?[4,t[n]()]:[3,2];case 1:e.sent(),this.game.addRandomTile(),this.view.renderTiles(this.game.getField()),e.label=2;case 2:return[2]}}))}))}))},e.prototype.getNotEmptyTiles=function(){return this.view.getTilesList().filter((function(e){return e.getValue()}))},e.prototype.render=function(){return this.view.render()},e}();t.GameController=o},642:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameModel=void 0;var a=i(n(266)),s=function(){function e(){var e=this;this.size=4,this.field=[],this.startGame=function(){e.setField(),e.addRandomTile(),e.addRandomTile()},this.moveUp=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e),o=r.shift,i=r.stack;t.push(o),n.push(i)}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),o=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(o),r.filter((function(e){return null!==e}))},this.moveDown=function(){var t=[],n=[];a.default.transposeMatrix(a.default.arrayToMatrix(e.getField(),e.size)).forEach((function(e){var r=a.default.compressArray(e.reverse()),o=r.shift,i=r.stack;t.push(o.reverse()),n.push(i.reverse())}));var r=a.default.matrixToArray(a.default.transposeMatrix(t)),o=a.default.matrixToArray(a.default.transposeMatrix(n));return e.updateField(o),r.filter((function(e){return null!==e}))},this.moveLeft=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var i=a.default.compressArray(e),s=i.shift,l=i.stack;t.push.apply(t,o([],r(s),!1)),n.push.apply(n,o([],r(l),!1))})),e.updateField(n),t.filter((function(e){return null!==e}))},this.moveRight=function(){var t=[],n=[];return a.default.arrayToMatrix(e.getField(),e.size).forEach((function(e){var i=a.default.compressArray(e.reverse()),s=i.shift,l=i.stack;t.push.apply(t,o([],r(s.reverse()),!1)),n.push.apply(n,o([],r(l.reverse()),!1))})),e.updateField(n),t.filter((function(e){return null!==e}))},this.startGame()}return e.prototype.setField=function(){this.field=Array(Math.pow(this.size,2)).fill(0)},e.prototype.updateField=function(e){this.field=o([],r(e),!1)},e.prototype.getField=function(){return o([],r(this.field),!1)},e.prototype.addRandomTile=function(){var e=[];if(this.field.forEach((function(t,n){return!t&&e.push(n)})),e.length){var t=e[Math.floor(Math.random()*e.length)];this.field[t]=Math.random()>.9?4:2}},e}();t.GameModel=s},424:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameView=void 0;var o=r(n(126)),i=r(n(885)),a=function(){function e(){this.tilesList=[],this.grid=(new o.default).render()}return e.prototype.setTilesList=function(e){var t=this;this.tilesList=[],e.forEach((function(e){return t.tilesList.push(new i.default({value:e}))}))},e.prototype.getTilesList=function(){return this.tilesList},e.prototype.renderTiles=function(e){var t=this;this.setTilesList(e),this.grid.innerHTML="",this.tilesList.forEach((function(e){return t.grid.append(e.render())}))},e.prototype.render=function(){return this.grid},e}();t.GameView=a},940:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Grid=void 0,n(493);var r=function(){function e(){this.grid=document.createElement("div"),this.grid.classList.add("grid")}return e.prototype.render=function(){return this.grid},e}();t.Grid=r},126:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(940);t.default=r.Grid},840:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{l(r.next(e))}catch(e){i(e)}}function s(e){try{l(r.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.Tile=void 0,n(385);var i=function(){function e(e){this.props=e,this.tile=document.createElement("div"),this.setValue(),this.setClasses()}return e.prototype.setValue=function(){this.tile.innerText=String(this.props.value||"")},e.prototype.setClasses=function(){this.tile.classList.add("tile"),0===this.props.value&&this.tile.classList.add("empty")},e.prototype.getValue=function(){return this.props.value},e.prototype.slide=function(e,t){return r(this,void 0,void 0,(function(){var n,r,i=this;return o(this,(function(o){return n="horizontal"===e?"X":"Y",r=function(e){return"translate".concat(n,"(").concat(e,"rem)")},[2,new Promise((function(e){i.tile.style.setProperty("--time","".concat(100,"ms")),i.tile.style.setProperty("--from",r(0)),i.tile.style.setProperty("--to",r(4.5*t)),i.tile.classList.add("slide"),setTimeout((function(){i.tile.removeAttribute("stile"),e(null)}),100)}))]}))}))},e.prototype.render=function(){return this.tile},e}();t.Tile=i},885:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=n(840);t.default=r.Tile},830:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.compressArray=void 0,t.compressArray=function(e){for(var t=[],o=[],i=0;i<e.length;i++)if(e[i]){var a=t.pop();a===e[i]?t.push(a+e[i]):t.push.apply(t,r([],n(a?[a,e[i]]:[e[i]]),!1)),o.push(t.length-1-i)}else o.push(null);return{stack:r(r([],n(t),!1),n(Array(e.length-t.length).fill(0)),!1),shift:o}}},266:function(e,t,n){var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});var s=a(n(830)),l=a(n(728)),u=r(r({},s),l);t.default=u},728:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.transposeMatrix=t.arrayToMatrix=t.matrixToArray=void 0,t.matrixToArray=function(e){return e.reduce((function(e,t){return r(r([],n(e),!1),n(t),!1)}),[])},t.arrayToMatrix=function(e,t){for(var n=[],r=0;r<e.length;r+=t)n.push(e.slice(r,r+t));return n},t.transposeMatrix=function(e){return e.map((function(t,n){return e.map((function(e){return e[n]}))}))}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{n(259);var e=n(642),t=n(638),r=n(424);document.addEventListener("DOMContentLoaded",(function(){var n=document.getElementById("root"),o=new t.GameController(new e.GameModel,new r.GameView);n.append(o.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,